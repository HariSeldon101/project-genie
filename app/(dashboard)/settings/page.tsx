'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createBrowserClient } from '@supabase/ssr'
import { useStripeCheckout } from '@/lib/hooks/use-stripe-checkout'
import { STRIPE_PRICE_IDS } from '@/lib/stripe/config'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Textarea } from '@/components/ui/textarea'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { 
  User, 
  Mail, 
  Lock, 
  Bell, 
  Palette, 
  CreditCard,
  Key,
  Upload,
  Save,
  AlertCircle,
  CheckCircle,
  Building,
  Globe,
  Shield,
  Sparkles,
  Crown,
  Trash2,
  Copy,
  Eye,
  EyeOff,
  RefreshCw,
  Download
} from 'lucide-react'

interface UserSettings {
  id: string
  email: string
  full_name: string
  avatar_url?: string
  subscription_tier: 'free' | 'basic' | 'premium'
  notifications_email: boolean
  notifications_push: boolean
  notifications_marketing: boolean
}

interface BrandingSettings {
  logo_url?: string
  primary_color: string
  secondary_color: string
  footer_text: string
  company_name: string
}

export default function SettingsPage() {
  const router = useRouter()
  const { createCheckoutSession, openCustomerPortal, loading: stripeLoading } = useStripeCheckout()
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [activeTab, setActiveTab] = useState('profile')
  const [showApiKey, setShowApiKey] = useState(false)
  const [apiKey, setApiKey] = useState('')
  
  const [userSettings, setUserSettings] = useState<UserSettings>({
    id: '',
    email: '',
    full_name: '',
    subscription_tier: 'free',
    notifications_email: true,
    notifications_push: false,
    notifications_marketing: false
  })

  const [brandingSettings, setBrandingSettings] = useState<BrandingSettings>({
    primary_color: '#3B82F6',
    secondary_color: '#10B981',
    footer_text: 'Generated by Project Genie',
    company_name: ''
  })

  useEffect(() => {
    loadSettings()
  }, [])

  const loadSettings = async () => {
    try {
      const supabase = createBrowserClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
      )

      const { data: user } = await supabase.auth.getUser()
      if (!user.user) {
        router.push('/login')
        return
      }

      // Load user settings
      const { data: userData } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.user.id)
        .single()

      if (userData) {
        setUserSettings({
          id: userData.id,
          email: userData.email,
          full_name: userData.full_name || '',
          avatar_url: userData.avatar_url,
          subscription_tier: userData.subscription_tier || 'free',
          notifications_email: true,
          notifications_push: false,
          notifications_marketing: false
        })
      }

      // Generate API key (mock)
      setApiKey(`pk_${Math.random().toString(36).substring(2, 15)}`)
    } catch (error) {
      console.error('Error loading settings:', error)
    } finally {
      setLoading(false)
    }
  }

  const saveProfile = async () => {
    setSaving(true)
    try {
      const supabase = createBrowserClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
      )

      const { error } = await supabase
        .from('users')
        .update({
          full_name: userSettings.full_name,
          updated_at: new Date().toISOString()
        })
        .eq('id', userSettings.id)

      if (!error) {
        // Show success message
      }
    } catch (error) {
      console.error('Error saving profile:', error)
    } finally {
      setSaving(false)
    }
  }

  const saveBranding = async () => {
    if (userSettings.subscription_tier === 'free') {
      alert('Branding customization is available for paid plans only')
      return
    }

    setSaving(true)
    try {
      // Save branding settings to database
      // This would typically save to a branding_settings table
      console.log('Saving branding:', brandingSettings)
    } catch (error) {
      console.error('Error saving branding:', error)
    } finally {
      setSaving(false)
    }
  }

  const regenerateApiKey = () => {
    setApiKey(`pk_${Math.random().toString(36).substring(2, 15)}`)
  }

  const copyApiKey = () => {
    navigator.clipboard.writeText(apiKey)
  }

  const getTierIcon = (tier: string) => {
    switch (tier) {
      case 'premium': return <Crown className="h-4 w-4 text-purple-500" />
      case 'basic': return <Sparkles className="h-4 w-4 text-blue-500" />
      default: return <User className="h-4 w-4 text-gray-500" />
    }
  }

  const getTierColor = (tier: string) => {
    switch (tier) {
      case 'premium': return 'bg-purple-500'
      case 'basic': return 'bg-blue-500'
      default: return 'bg-gray-500'
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading settings...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-muted-foreground mt-1">
          Manage your account, preferences, and subscription
        </p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid grid-cols-5 w-full max-w-2xl">
          <TabsTrigger value="profile">Profile</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="branding">Branding</TabsTrigger>
          <TabsTrigger value="billing">Billing</TabsTrigger>
          <TabsTrigger value="api">API Keys</TabsTrigger>
        </TabsList>

        {/* Profile Tab */}
        <TabsContent value="profile" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Profile Information</CardTitle>
              <CardDescription>Update your personal information and avatar</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center gap-6">
                <Avatar className="h-20 w-20">
                  <AvatarImage src={userSettings.avatar_url} />
                  <AvatarFallback>
                    {userSettings.full_name?.charAt(0) || userSettings.email?.charAt(0)}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <Button variant="outline">
                    <Upload className="mr-2 h-4 w-4" />
                    Upload Avatar
                  </Button>
                  <p className="text-xs text-muted-foreground mt-2">
                    Recommended: 200x200px, max 2MB
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Full Name</Label>
                  <Input
                    id="name"
                    value={userSettings.full_name}
                    onChange={(e) => setUserSettings({...userSettings, full_name: e.target.value})}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email Address</Label>
                  <Input
                    id="email"
                    type="email"
                    value={userSettings.email}
                    disabled
                  />
                </div>
              </div>

              <div className="flex justify-end">
                <Button onClick={saveProfile} disabled={saving}>
                  <Save className="mr-2 h-4 w-4" />
                  {saving ? 'Saving...' : 'Save Changes'}
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Account Security</CardTitle>
              <CardDescription>Manage your password and security settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button variant="outline">
                <Lock className="mr-2 h-4 w-4" />
                Change Password
              </Button>
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Two-Factor Authentication</p>
                  <p className="text-sm text-muted-foreground">
                    Add an extra layer of security to your account
                  </p>
                </div>
                <Switch />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notifications Tab */}
        <TabsContent value="notifications" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>Choose how you want to be notified</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Email Notifications</p>
                  <p className="text-sm text-muted-foreground">
                    Receive updates about your projects via email
                  </p>
                </div>
                <Switch
                  checked={userSettings.notifications_email}
                  onCheckedChange={(checked) => 
                    setUserSettings({...userSettings, notifications_email: checked})
                  }
                />
              </div>
              <Separator />
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Push Notifications</p>
                  <p className="text-sm text-muted-foreground">
                    Get instant updates in your browser
                  </p>
                </div>
                <Switch
                  checked={userSettings.notifications_push}
                  onCheckedChange={(checked) => 
                    setUserSettings({...userSettings, notifications_push: checked})
                  }
                />
              </div>
              <Separator />
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Marketing Emails</p>
                  <p className="text-sm text-muted-foreground">
                    Receive news and updates about Project Genie
                  </p>
                </div>
                <Switch
                  checked={userSettings.notifications_marketing}
                  onCheckedChange={(checked) => 
                    setUserSettings({...userSettings, notifications_marketing: checked})
                  }
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Branding Tab */}
        <TabsContent value="branding" className="space-y-6">
          {userSettings.subscription_tier === 'free' && (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                Custom branding is available for Basic and Premium plans.{' '}
                <Button 
                  variant="link" 
                  className="p-0 h-auto" 
                  onClick={() => createCheckoutSession(STRIPE_PRICE_IDS.basic.monthly, 'monthly')}
                  disabled={stripeLoading}
                >
                  {stripeLoading ? 'Loading...' : 'Upgrade now'}
                </Button>
              </AlertDescription>
            </Alert>
          )}

          <Card>
            <CardHeader>
              <CardTitle>Brand Customization</CardTitle>
              <CardDescription>
                Customize how your documents and reports appear
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="company">Company Name</Label>
                <Input
                  id="company"
                  value={brandingSettings.company_name}
                  onChange={(e) => setBrandingSettings({...brandingSettings, company_name: e.target.value})}
                  disabled={userSettings.subscription_tier === 'free'}
                />
              </div>

              <div className="space-y-2">
                <Label>Company Logo</Label>
                <div className="flex items-center gap-4">
                  {brandingSettings.logo_url ? (
                    <img src={brandingSettings.logo_url} alt="Logo" className="h-16 w-auto" />
                  ) : (
                    <div className="h-16 w-16 bg-muted rounded flex items-center justify-center">
                      <Building className="h-8 w-8 text-muted-foreground" />
                    </div>
                  )}
                  <Button variant="outline" disabled={userSettings.subscription_tier === 'free'}>
                    <Upload className="mr-2 h-4 w-4" />
                    Upload Logo
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="primary">Primary Color</Label>
                  <div className="flex gap-2">
                    <Input
                      id="primary"
                      type="color"
                      value={brandingSettings.primary_color}
                      onChange={(e) => setBrandingSettings({...brandingSettings, primary_color: e.target.value})}
                      disabled={userSettings.subscription_tier === 'free'}
                      className="w-20"
                    />
                    <Input
                      value={brandingSettings.primary_color}
                      onChange={(e) => setBrandingSettings({...brandingSettings, primary_color: e.target.value})}
                      disabled={userSettings.subscription_tier === 'free'}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="secondary">Secondary Color</Label>
                  <div className="flex gap-2">
                    <Input
                      id="secondary"
                      type="color"
                      value={brandingSettings.secondary_color}
                      onChange={(e) => setBrandingSettings({...brandingSettings, secondary_color: e.target.value})}
                      disabled={userSettings.subscription_tier === 'free'}
                      className="w-20"
                    />
                    <Input
                      value={brandingSettings.secondary_color}
                      onChange={(e) => setBrandingSettings({...brandingSettings, secondary_color: e.target.value})}
                      disabled={userSettings.subscription_tier === 'free'}
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="footer">Document Footer Text</Label>
                <Textarea
                  id="footer"
                  value={brandingSettings.footer_text}
                  onChange={(e) => setBrandingSettings({...brandingSettings, footer_text: e.target.value})}
                  disabled={userSettings.subscription_tier === 'free'}
                  placeholder="e.g., Confidential - Property of Your Company"
                />
                {userSettings.subscription_tier === 'free' && (
                  <p className="text-xs text-muted-foreground">
                    Free tier documents include "Generated by Project Genie" watermark
                  </p>
                )}
              </div>

              <div className="flex justify-end">
                <Button 
                  onClick={saveBranding} 
                  disabled={saving || userSettings.subscription_tier === 'free'}
                >
                  <Save className="mr-2 h-4 w-4" />
                  {saving ? 'Saving...' : 'Save Branding'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Billing Tab */}
        <TabsContent value="billing" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Current Plan</CardTitle>
              <CardDescription>Manage your subscription and billing</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex items-center gap-3">
                  {getTierIcon(userSettings.subscription_tier)}
                  <div>
                    <p className="font-semibold capitalize">{userSettings.subscription_tier} Plan</p>
                    <p className="text-sm text-muted-foreground">
                      {userSettings.subscription_tier === 'free' 
                        ? 'Limited features' 
                        : userSettings.subscription_tier === 'basic'
                        ? '$19/month'
                        : '$49/month'}
                    </p>
                  </div>
                </div>
                {userSettings.subscription_tier !== 'premium' && (
                  userSettings.subscription_tier === 'free' ? (
                    <Button 
                      onClick={() => createCheckoutSession(STRIPE_PRICE_IDS.basic.monthly, 'monthly')}
                      disabled={stripeLoading}
                    >
                      {stripeLoading ? 'Loading...' : 'Upgrade to Basic'}
                    </Button>
                  ) : userSettings.subscription_tier === 'basic' ? (
                    <Button 
                      onClick={() => createCheckoutSession(STRIPE_PRICE_IDS.premium.monthly, 'monthly')}
                      disabled={stripeLoading}
                    >
                      {stripeLoading ? 'Loading...' : 'Upgrade to Premium'}
                    </Button>
                  ) : (
                    <Button 
                      onClick={() => openCustomerPortal()}
                      disabled={stripeLoading}
                    >
                      {stripeLoading ? 'Loading...' : 'Manage Subscription'}
                    </Button>
                  )
                )}
              </div>

              {userSettings.subscription_tier !== 'free' && (
                <>
                  <Separator />
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Next billing date</span>
                      <span className="text-sm">January 1, 2025</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Payment method</span>
                      <div className="flex items-center gap-2">
                        <CreditCard className="h-4 w-4" />
                        <span className="text-sm">•••• 4242</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline">Update Payment Method</Button>
                    <Button variant="outline">Download Invoices</Button>
                  </div>
                </>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Usage & Limits</CardTitle>
              <CardDescription>Track your plan usage</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Projects</span>
                  <span>2 / {userSettings.subscription_tier === 'free' ? '1' : userSettings.subscription_tier === 'basic' ? '10' : 'Unlimited'}</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-primary h-2 rounded-full" style={{ width: '20%' }} />
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Team Members</span>
                  <span>3 / {userSettings.subscription_tier === 'free' ? '2' : userSettings.subscription_tier === 'basic' ? '10' : 'Unlimited'}</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-primary h-2 rounded-full" style={{ width: '30%' }} />
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Documents Generated</span>
                  <span>15 this month</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="bg-primary h-2 rounded-full" style={{ width: '50%' }} />
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* API Keys Tab */}
        <TabsContent value="api" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>API Access</CardTitle>
              <CardDescription>
                Manage your API keys for programmatic access
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {userSettings.subscription_tier === 'free' ? (
                <Alert>
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    API access is available for Basic and Premium plans.{' '}
                    <Button 
                      variant="link" 
                      className="p-0 h-auto" 
                      onClick={() => createCheckoutSession(STRIPE_PRICE_IDS.basic.monthly, 'monthly')}
                      disabled={stripeLoading}
                    >
                      {stripeLoading ? 'Loading...' : 'Upgrade now'}
                    </Button>
                  </AlertDescription>
                </Alert>
              ) : (
                <>
                  <div className="space-y-2">
                    <Label>API Key</Label>
                    <div className="flex gap-2">
                      <div className="flex-1 relative">
                        <Input
                          type={showApiKey ? 'text' : 'password'}
                          value={apiKey}
                          readOnly
                        />
                        <Button
                          variant="ghost"
                          size="sm"
                          className="absolute right-2 top-1/2 -translate-y-1/2"
                          onClick={() => setShowApiKey(!showApiKey)}
                        >
                          {showApiKey ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                        </Button>
                      </div>
                      <Button variant="outline" onClick={copyApiKey}>
                        <Copy className="h-4 w-4" />
                      </Button>
                      <Button variant="outline" onClick={regenerateApiKey}>
                        <RefreshCw className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-xs text-muted-foreground">
                      Keep your API key secure. Do not share it publicly.
                    </p>
                  </div>

                  <Separator />

                  <div className="space-y-4">
                    <h3 className="font-medium">API Documentation</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Card>
                        <CardHeader className="pb-3">
                          <CardTitle className="text-sm">Base URL</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <code className="text-xs bg-muted p-2 rounded block">
                            https://api.projectgenie.ai/v1
                          </code>
                        </CardContent>
                      </Card>
                      <Card>
                        <CardHeader className="pb-3">
                          <CardTitle className="text-sm">Authentication</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <code className="text-xs bg-muted p-2 rounded block">
                            Authorization: Bearer YOUR_API_KEY
                          </code>
                        </CardContent>
                      </Card>
                    </div>
                    <Button variant="outline">
                      <Download className="mr-2 h-4 w-4" />
                      Download API Documentation
                    </Button>
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}