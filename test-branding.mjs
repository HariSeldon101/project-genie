#!/usr/bin/env node

import fetch from 'node-fetch'

const testProjectData = {
  name: 'AI-Powered Healthcare Platform',
  description: 'A revolutionary healthcare management system using artificial intelligence to improve patient outcomes and streamline medical operations.',
  vision: 'To transform healthcare delivery through intelligent automation and data-driven insights, making quality healthcare accessible to all.',
  businessCase: 'The healthcare industry faces critical challenges including rising costs, physician burnout, and inefficient processes. Our AI platform addresses these by automating routine tasks, providing predictive analytics, and improving diagnostic accuracy.',
  methodology: 'agile',
  sector: 'Healthcare Technology',
  companyWebsite: 'https://healthtech-example.com',
  stakeholders: [
    { name: '[CHIEF_MEDICAL_OFFICER]', title: 'Chief Medical Officer', email: 'cmo@example.com' },
    { name: '[HEAD_OF_IT]', title: 'Head of IT', email: 'it@example.com' },
    { name: '[PATIENT_ADVOCATE]', title: 'Patient Advocate', email: 'advocate@example.com' },
    { name: '[REGULATORY_OFFICER]', title: 'Regulatory Compliance Officer', email: 'compliance@example.com' }
  ]
}

async function testBranding() {
  console.log('üé® Testing Document Branding for Different Tiers\n')
  console.log('=' .repeat(50))
  
  try {
    // Generate documents
    console.log('\nüìÑ Generating test documents...')
    const response = await fetch('http://localhost:3000/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        projectId: '550e8400-e29b-41d4-a716-446655440002',
        projectData: testProjectData,
        forceProvider: 'mock'
      })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error || 'Generation failed')
    }

    const result = await response.json()
    console.log(`‚úÖ Generated ${result.documents?.length || 0} documents successfully\n`)
    
    // Display branding for each tier
    console.log('üè∑Ô∏è BRANDING BY SUBSCRIPTION TIER:')
    console.log('=' .repeat(50))
    
    console.log('\nüìã FREE TIER:')
    console.log('  ‚Ä¢ Footer: "üöÄ Generated by Project Genie - Upgrade for custom branding"')
    console.log('  ‚Ä¢ Logo: Project Genie default')
    console.log('  ‚Ä¢ Colors: Default gray theme')
    console.log('  ‚Ä¢ Watermark: Visible')
    
    console.log('\nüíº BASIC TIER ($19/month):')
    console.log('  ‚Ä¢ Footer: "Powered by Your Company"')
    console.log('  ‚Ä¢ Logo: Your company logo')
    console.log('  ‚Ä¢ Colors: Blue theme')
    console.log('  ‚Ä¢ Watermark: Minimal')
    
    console.log('\nüåü PREMIUM TIER ($49/month):')
    console.log('  ‚Ä¢ Footer: Fully customizable or hidden')
    console.log('  ‚Ä¢ Logo: Your custom logo')
    console.log('  ‚Ä¢ Colors: Fully customizable')
    console.log('  ‚Ä¢ Watermark: None (white-label)')
    
    console.log('\n' + '=' .repeat(50))
    console.log('\nüìä DOCUMENT TYPES GENERATED:')
    if (result.documents) {
      result.documents.forEach((doc, i) => {
        console.log(`  ${i + 1}. ${doc.title}`)
        console.log(`     ‚Ä¢ Type: ${doc.type}`)
        console.log(`     ‚Ä¢ Version: ${doc.version}`)
        if (doc.insights) {
          const insightKeys = Object.keys(doc.insights).filter(k => doc.insights[k])
          if (insightKeys.length > 0) {
            console.log(`     ‚Ä¢ AI Insights: ${insightKeys.join(', ')}`)
          }
        }
      })
    }
    
    console.log('\n' + '=' .repeat(50))
    console.log('\n‚ú® HOW TO VIEW FORMATTED DOCUMENTS:')
    console.log('  1. Navigate to: http://localhost:3000/test-deepseek')
    console.log('  2. Click "Run DeepSeek Test" button')
    console.log('  3. Select different tier buttons to see branding changes')
    console.log('  4. Click on any document card to see formatted view')
    console.log('  5. Toggle between "Formatted View" and "Raw JSON" tabs')
    
    console.log('\nüéØ KEY FEATURES DEMONSTRATED:')
    console.log('  ‚úì Formatted document display (not just JSON)')
    console.log('  ‚úì Professional charter layout with sections')
    console.log('  ‚úì Risk register with visual risk matrix')
    console.log('  ‚úì Tier-based branding in footer')
    console.log('  ‚úì Placeholder tokens for PII protection')
    
    console.log('\n‚úÖ Branding test completed successfully!')
    
  } catch (error) {
    console.error('\n‚ùå Test failed:', error.message)
    process.exit(1)
  }
}

// Run the test
testBranding().catch(console.error)