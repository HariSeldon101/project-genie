'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Slider } from '@/components/ui/slider'
import { TooltipWrapper } from '@/components/company-intelligence/tooltip-wrapper'
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger
} from '@/components/ui/collapsible'
import { Alert, AlertDescription } from '@/components/ui/alert'
import {
  Play,
  Settings,
  Zap,
  Shield,
  DollarSign,
  Loader2,
  CheckCircle2,
  AlertCircle,
  Clock,
  Cpu,
  Globe,
  FileSearch,
  Camera,
  FileText,
  MousePointer,
  Brain,
  Code,
  Info,
  HelpCircle,
  XCircle
} from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { animationVariants } from './types'
import type { SiteAnalysis } from '@/components/company-intelligence/site-analyzer'
import type { ScraperConfig } from '@/components/company-intelligence/scraper-config/scraper-config-panel'

interface ScraperControlsProps {
  siteAnalysis: SiteAnalysis
  onConfigChange: (config: ScraperConfig) => void
  onExecute: () => void
  isExecuting: boolean
  progress: number
}

export function ScraperControls({
  siteAnalysis,
  onConfigChange,
  onExecute,
  isExecuting,
  progress
}: ScraperControlsProps) {
  const [scraperType, setScraperType] = useState<'firecrawl' | 'playwright' | 'cheerio'>('firecrawl')
  const [preset, setPreset] = useState<'discovery' | 'quick' | 'comprehensive' | 'stealth'>('quick')
  const [showAdvanced, setShowAdvanced] = useState(false)

  // Firecrawl API status tracking
  const [firecrawlStatus, setFirecrawlStatus] = useState<
    'checking' | 'connected' | 'not_configured' | 'invalid_key' | 'error'
  >('checking')

  // Feature toggles
  const [features, setFeatures] = useState({
    // Firecrawl features
    mapDiscovery: true,
    schemaExtraction: true,
    screenshots: false,
    pdfGeneration: false,
    llmExtraction: true,
    actions: false,

    // Playwright features
    stealthMode: false,
    fingerprinting: false,
    humanBehavior: false,
    sessionPersistence: false,
    proxyRotation: false,
    captchaSolving: false
  })

  // Resource limits
  const [limits, setLimits] = useState({
    maxPages: 10,
    maxDepth: 2,
    timeout: 30000,
    budget: 0.50
  })

  // Check Firecrawl API status on mount with proper cleanup and timeout
  useEffect(() => {
    // Allow disabling the check via environment variable for debugging
    if (process.env.NEXT_PUBLIC_DISABLE_FIRECRAWL_CHECK === 'true') {
      console.log('[ScraperControls] Firecrawl check disabled by environment variable')
      setFirecrawlStatus('not_configured')
      return
    }

    console.log('[ScraperControls] Component mounting, initiating Firecrawl status check...')

    let mounted = true
    const controller = new AbortController()

    const checkFirecrawlStatus = async () => {
      // Defer the check slightly to avoid blocking initial render
      await new Promise(resolve => setTimeout(resolve, 100))

      if (!mounted) {
        console.log('[ScraperControls] Component unmounted before API check, aborting...')
        return
      }

      console.log('[ScraperControls] Starting Firecrawl API status check...')

      try {
        // Create a 3-second timeout
        const timeoutId = setTimeout(() => {
          console.log('[ScraperControls] API check timeout, aborting...')
          controller.abort()
        }, 3000)

        const response = await fetch('/api/company-intelligence/test-firecrawl', {
          signal: controller.signal,
          // Add cache control to prevent stale responses
          cache: 'no-store'
        })

        clearTimeout(timeoutId)

        if (!mounted) {
          console.log('[ScraperControls] Component unmounted during fetch, ignoring response')
          return
        }

        const data = await response.json()
        console.log('[ScraperControls] API response received:', data.status)

        if (mounted) {
          setFirecrawlStatus(data.status)
        }
      } catch (error) {
        console.error('[ScraperControls] API check failed:', error)

        if (!mounted) return

        if (error instanceof Error && error.name === 'AbortError') {
          console.log('[ScraperControls] Request aborted (timeout or unmount)')
          setFirecrawlStatus('error')
        } else {
          console.error('[ScraperControls] Unexpected error:', error)
          setFirecrawlStatus('error')
        }
      }
    }

    // Start the check asynchronously to avoid blocking
    checkFirecrawlStatus().catch(err => {
      console.error('[ScraperControls] Unhandled error in checkFirecrawlStatus:', err)
      if (mounted) {
        setFirecrawlStatus('error')
      }
    })

    // Cleanup function
    return () => {
      console.log('[ScraperControls] Component unmounting, cleaning up...')
      mounted = false
      controller.abort()
    }
  }, [])

  const presetConfigs = {
    discovery: {
      name: 'Discovery',
      description: 'Fast initial scan',
      icon: <Zap className="h-4 w-4" />,
      color: 'text-yellow-500',
      config: {
        maxPages: 5,
        features: { mapDiscovery: true, schemaExtraction: false }
      }
    },
    quick: {
      name: 'Quick Scan',
      description: 'Balanced speed & data',
      icon: <Clock className="h-4 w-4" />,
      color: 'text-blue-500',
      config: {
        maxPages: 10,
        features: { mapDiscovery: true, schemaExtraction: true, llmExtraction: true }
      }
    },
    comprehensive: {
      name: 'Comprehensive',
      description: 'Deep analysis',
      icon: <FileSearch className="h-4 w-4" />,
      color: 'text-green-500',
      config: {
        maxPages: 50,
        features: {
          mapDiscovery: true,
          schemaExtraction: true,
          screenshots: true,
          pdfGeneration: true,
          llmExtraction: true
        }
      }
    },
    stealth: {
      name: 'Stealth Mode',
      description: 'Anti-detection focus',
      icon: <Shield className="h-4 w-4" />,
      color: 'text-purple-500',
      config: {
        scraperType: 'playwright',
        features: {
          stealthMode: true,
          fingerprinting: true,
          humanBehavior: true,
          proxyRotation: true
        }
      }
    }
  }

  const estimateCost = () => {
    let cost = 0

    // Base cost by scraper
    if (scraperType === 'firecrawl') cost += 0.01
    else if (scraperType === 'playwright') cost += 0.005
    else cost += 0.001 // Cheerio

    // Feature costs
    if (features.mapDiscovery) cost += 0.02
    if (features.schemaExtraction) cost += 0.01
    if (features.screenshots) cost += 0.005
    if (features.pdfGeneration) cost += 0.01
    if (features.llmExtraction) cost += 0.03
    if (features.captchaSolving) cost += 0.05

    // Multiply by pages
    cost *= Math.min(limits.maxPages, 50)

    return cost
  }

  const handlePresetChange = (newPreset: typeof preset) => {
    setPreset(newPreset)
    const config = presetConfigs[newPreset].config

    if ('scraperType' in config) {
      setScraperType(config.scraperType as any)
    }

    if (config.features) {
      setFeatures({ ...features, ...config.features })
    }

    if (config.maxPages) {
      setLimits({ ...limits, maxPages: config.maxPages })
    }

    // Notify parent of config change
    const scraperConfig: ScraperConfig = {
      scraperType,
      preset: newPreset,
      activeFeatures: Object.entries(features)
        .filter(([_, enabled]) => enabled)
        .map(([feature]) => feature),
      limits,
      estimatedCost: estimateCost()
    }

    onConfigChange(scraperConfig)
  }

  const handleExecute = () => {
    const scraperConfig: ScraperConfig = {
      scraperType,
      preset,
      activeFeatures: Object.entries(features)
        .filter(([_, enabled]) => enabled)
        .map(([feature]) => feature),
      limits,
      estimatedCost: estimateCost()
    }

    onConfigChange(scraperConfig)
    onExecute()
  }

  // Show minimal UI while checking Firecrawl status (prevent blocking)
  // This is only shown very briefly during initial load
  if (scraperType === 'firecrawl' && firecrawlStatus === 'checking') {
    console.log('[ScraperControls] Rendering loading state for Firecrawl check')
    // Still render the full UI but with a subtle loading indicator
    // This prevents jarring UI changes and allows immediate interaction
  }

  return (
    <Card className={cn(
      "overflow-hidden",
      "bg-gradient-to-br from-green-50/80 to-green-50/40",
      "dark:from-green-950/20 dark:to-green-950/10",
      "border-green-200 dark:border-green-800",
      "shadow-lg shadow-green-100/50 dark:shadow-green-900/20"
    )}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Settings className="h-5 w-5 text-primary" />
            <div>
              <CardTitle className="text-lg">Scraper Configuration</CardTitle>
              <CardDescription className="mt-1">
                Configure and execute v3 scrapers for {siteAnalysis.domain}
              </CardDescription>
            </div>
          </div>

          {/* Cost estimate */}
          <div className="flex items-center gap-3">
            <TooltipWrapper content="Estimated cost for this scraping operation">
              <Badge variant="outline" className="gap-1">
                <DollarSign className="h-3 w-3" />
                <span className="font-bold">${estimateCost().toFixed(3)}</span>
              </Badge>
            </TooltipWrapper>

            {/* Execute button */}
            <TooltipWrapper content={isExecuting ? "Scraping in progress..." : "Start scraping with current configuration"}>
              <Button
                onClick={handleExecute}
                disabled={isExecuting}
                className="gap-2"
              >
                {isExecuting ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Scraping... {progress}%
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4" />
                    Start Scraping
                  </>
                )}
              </Button>
            </TooltipWrapper>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Progress bar */}
        <AnimatePresence>
          {isExecuting && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
            >
              <Progress value={progress} className="h-2" />
              <p className="text-xs text-muted-foreground mt-2">
                Processing {siteAnalysis.domain}...
              </p>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Preset selector - Fixed sizing */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {Object.entries(presetConfigs).map(([key, config]) => (
            <TooltipWrapper key={key} content={config.description}>
              <button
                onClick={() => handlePresetChange(key as typeof preset)}
                className={cn(
                  // Fixed height for consistency
                  "h-24 w-full",
                  "p-4 rounded-lg border-2",
                  "flex flex-col items-center justify-center gap-2",
                  "transition-all duration-200",
                  "hover:scale-105 hover:shadow-lg",
                  preset === key ?
                    "border-primary bg-primary/10 shadow-primary/20" :
                    "border-border hover:border-primary/50"
                )}
              >
                <div className={cn("p-2 rounded-full bg-background", config.color)}>
                  {config.icon}
                </div>
                <span className="text-sm font-medium">{config.name}</span>
              </button>
            </TooltipWrapper>
          ))}
        </div>

        {/* Scraper type tabs - Fixed text cropping with proper height */}
        <Tabs value={scraperType} onValueChange={(v) => setScraperType(v as any)}>
          <TabsList className="grid w-full grid-cols-3 gap-1 p-1 bg-muted/50 h-auto">
            <TabsTrigger
              value="firecrawl"
              className={cn(
                "relative flex flex-col items-center justify-center gap-1",
                "min-h-[5rem] py-3 px-2",
                "data-[state=active]:bg-purple-500 data-[state=active]:text-white",
                "data-[state=active]:shadow-lg data-[state=active]:shadow-purple-500/25",
                "transition-all duration-200"
              )}
            >
              <Brain className="h-5 w-5 shrink-0" />
              <div className="text-center">
                <div className="font-medium text-sm whitespace-nowrap">AI Scraper</div>
                <div className="text-[10px] opacity-80 mt-0.5">(Firecrawl)</div>
              </div>
            </TabsTrigger>
            <TabsTrigger
              value="playwright"
              className={cn(
                "relative flex flex-col items-center justify-center gap-1",
                "min-h-[5rem] py-3 px-2",
                "data-[state=active]:bg-blue-500 data-[state=active]:text-white",
                "data-[state=active]:shadow-lg data-[state=active]:shadow-blue-500/25",
                "transition-all duration-200"
              )}
            >
              <Globe className="h-5 w-5 shrink-0" />
              <div className="text-center">
                <div className="font-medium text-sm whitespace-nowrap">Dynamic</div>
                <div className="text-[10px] opacity-80 mt-0.5">(Playwright)</div>
              </div>
            </TabsTrigger>
            <TabsTrigger
              value="cheerio"
              className={cn(
                "relative flex flex-col items-center justify-center gap-1",
                "min-h-[5rem] py-3 px-2",
                "data-[state=active]:bg-green-500 data-[state=active]:text-white",
                "data-[state=active]:shadow-lg data-[state=active]:shadow-green-500/25",
                "transition-all duration-200"
              )}
            >
              <Code className="h-5 w-5 shrink-0" />
              <div className="text-center">
                <div className="font-medium text-sm whitespace-nowrap">Static</div>
                <div className="text-[10px] opacity-80 mt-0.5">(Cheerio)</div>
              </div>
            </TabsTrigger>
          </TabsList>

          {/* Firecrawl features */}
          <TabsContent value="firecrawl" className="space-y-4 mt-4">
            {/* API Status Indicator */}
            <div className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
              <span className="text-sm font-medium">Firecrawl API Status</span>
              <Badge
                variant={firecrawlStatus === 'connected' ? 'default' : 'secondary'}
                className="gap-1"
              >
                {firecrawlStatus === 'connected' && (
                  <>
                    <CheckCircle2 className="h-3 w-3" />
                    Connected
                  </>
                )}
                {firecrawlStatus === 'not_configured' && (
                  <>
                    <AlertCircle className="h-3 w-3" />
                    Add API Key in .env.local
                  </>
                )}
                {firecrawlStatus === 'invalid_key' && (
                  <>
                    <XCircle className="h-3 w-3" />
                    Invalid API Key
                  </>
                )}
                {firecrawlStatus === 'error' && (
                  <>
                    <XCircle className="h-3 w-3" />
                    Connection Error
                  </>
                )}
                {firecrawlStatus === 'checking' && (
                  <>
                    <Loader2 className="h-3 w-3 animate-spin" />
                    Checking...
                  </>
                )}
              </Badge>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-3">
                <TooltipWrapper content={
                  <div className="max-w-xs space-y-2 p-1">
                    <p className="font-semibold text-sm">Map Discovery</p>
                    <p className="text-xs">
                      Automatically discovers and crawls all URLs on the website
                      using Firecrawl's Map API endpoint.
                    </p>
                    <div className="pt-1 border-t space-y-1">
                      <p className="text-xs text-muted-foreground">
                        💰 Cost: ~500 credits
                      </p>
                      <p className="text-xs text-muted-foreground">
                        ⏱️ Time: 30-60 seconds
                      </p>
                      <p className="text-xs text-muted-foreground">
                        📊 Output: Full sitemap with metadata
                      </p>
                    </div>
                  </div>
                }>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="map-discovery" className="text-sm">Map Discovery</Label>
                    <Switch
                      id="map-discovery"
                      checked={features.mapDiscovery}
                      onCheckedChange={(v) => setFeatures({ ...features, mapDiscovery: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Extract structured data using predefined schemas">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="schema" className="text-sm">Schema Extraction</Label>
                    <Switch
                      id="schema"
                      checked={features.schemaExtraction}
                      onCheckedChange={(v) => setFeatures({ ...features, schemaExtraction: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Capture screenshots of pages">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="screenshots" className="text-sm">
                      <Camera className="h-3 w-3 inline mr-1" />
                      Screenshots
                    </Label>
                    <Switch
                      id="screenshots"
                      checked={features.screenshots}
                      onCheckedChange={(v) => setFeatures({ ...features, screenshots: v })}
                    />
                  </div>
                </TooltipWrapper>
              </div>

              <div className="space-y-3">
                <TooltipWrapper content="Generate PDF versions of pages">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="pdf" className="text-sm">
                      <FileText className="h-3 w-3 inline mr-1" />
                      PDF Generation
                    </Label>
                    <Switch
                      id="pdf"
                      checked={features.pdfGeneration}
                      onCheckedChange={(v) => setFeatures({ ...features, pdfGeneration: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content={
                  <div className="max-w-xs space-y-2 p-1">
                    <p className="font-semibold text-sm">LLM Extraction</p>
                    <p className="text-xs">
                      Uses AI to understand content context and extract
                      specific information based on your schema.
                    </p>
                    <div className="pt-1 border-t space-y-1">
                      <p className="text-xs text-muted-foreground">
                        💰 Cost: +2-3 credits per page
                      </p>
                      <p className="text-xs text-muted-foreground">
                        🎯 Accuracy: 95%+ with good schemas
                      </p>
                      <p className="text-xs text-muted-foreground">
                        📝 Best for: Structured data extraction
                      </p>
                    </div>
                  </div>
                }>
                  <div className="flex items-center justify-between">
                    <Label htmlFor="llm" className="text-sm">LLM Extraction</Label>
                    <Switch
                      id="llm"
                      checked={features.llmExtraction}
                      onCheckedChange={(v) => setFeatures({ ...features, llmExtraction: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Simulate user interactions (clicks, scrolls)">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="actions" className="text-sm">
                      <MousePointer className="h-3 w-3 inline mr-1" />
                      Actions
                    </Label>
                    <Switch
                      id="actions"
                      checked={features.actions}
                      onCheckedChange={(v) => setFeatures({ ...features, actions: v })}
                    />
                  </div>
                </TooltipWrapper>
              </div>
            </div>

            {/* Collapsible Documentation Section */}
            <Collapsible className="mt-4">
              <CollapsibleTrigger className="flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors">
                <Info className="h-4 w-4" />
                Learn more about Firecrawl AI Scraper
                <ChevronDown className="h-4 w-4 ml-auto" />
              </CollapsibleTrigger>
              <CollapsibleContent className="mt-4">
                <div className="space-y-4 p-4 bg-purple-50/50 dark:bg-purple-950/20 rounded-lg border border-purple-200/50 dark:border-purple-800/50">
                  <div>
                    <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                      <Brain className="h-4 w-4 text-purple-500" />
                      About Firecrawl AI Scraper
                    </h4>
                    <p className="text-xs text-muted-foreground">
                      Firecrawl is an advanced AI-powered web scraping service that converts websites
                      into clean, LLM-ready markdown or structured data. It handles JavaScript rendering,
                      dynamic content, and provides intelligent extraction capabilities.
                    </p>
                  </div>

                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <h5 className="font-medium text-xs mb-2">Key Features</h5>
                      <ul className="space-y-1 text-xs text-muted-foreground">
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Automatic URL discovery via Map API</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>LLM-powered content extraction</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>JavaScript rendering support</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Structured data with schemas</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Screenshot and PDF generation</span>
                        </li>
                      </ul>
                    </div>

                    <div>
                      <h5 className="font-medium text-xs mb-2">Best For</h5>
                      <ul className="space-y-1 text-xs text-muted-foreground">
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>React, Vue, Angular SPAs</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Complex data extraction needs</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Content requiring AI understanding</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Multi-page workflow automation</span>
                        </li>
                      </ul>
                    </div>
                  </div>

                  <Alert className="bg-purple-100/50 dark:bg-purple-900/20 border-purple-200">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription className="text-xs">
                      <strong>Pricing:</strong> Free tier includes 500 credits/month.
                      Each page scrape costs 1-5 credits depending on features enabled.
                      <a href="https://firecrawl.dev/pricing"
                         target="_blank"
                         rel="noopener noreferrer"
                         className="ml-1 text-purple-600 hover:underline">
                        View pricing details →
                      </a>
                    </AlertDescription>
                  </Alert>
                </div>
              </CollapsibleContent>
            </Collapsible>
          </TabsContent>

          {/* Playwright features */}
          <TabsContent value="playwright" className="space-y-4 mt-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-3">
                <TooltipWrapper content="Enhanced anti-detection measures">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="stealth" className="text-sm">
                      <Shield className="h-3 w-3 inline mr-1" />
                      Stealth Mode
                    </Label>
                    <Switch
                      id="stealth"
                      checked={features.stealthMode}
                      onCheckedChange={(v) => setFeatures({ ...features, stealthMode: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Randomize browser fingerprints">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="fingerprint" className="text-sm">Fingerprinting</Label>
                    <Switch
                      id="fingerprint"
                      checked={features.fingerprinting}
                      onCheckedChange={(v) => setFeatures({ ...features, fingerprinting: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Simulate human-like mouse movements">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="human" className="text-sm">Human Behavior</Label>
                    <Switch
                      id="human"
                      checked={features.humanBehavior}
                      onCheckedChange={(v) => setFeatures({ ...features, humanBehavior: v })}
                    />
                  </div>
                </TooltipWrapper>
              </div>

              <div className="space-y-3">
                <TooltipWrapper content="Maintain session across requests">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="session" className="text-sm">Session Persist</Label>
                    <Switch
                      id="session"
                      checked={features.sessionPersistence}
                      onCheckedChange={(v) => setFeatures({ ...features, sessionPersistence: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Rotate proxy servers">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="proxy" className="text-sm">Proxy Rotation</Label>
                    <Switch
                      id="proxy"
                      checked={features.proxyRotation}
                      onCheckedChange={(v) => setFeatures({ ...features, proxyRotation: v })}
                    />
                  </div>
                </TooltipWrapper>

                <TooltipWrapper content="Automatic CAPTCHA solving">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="captcha" className="text-sm">CAPTCHA Solver</Label>
                    <Switch
                      id="captcha"
                      checked={features.captchaSolving}
                      onCheckedChange={(v) => setFeatures({ ...features, captchaSolving: v })}
                    />
                  </div>
                </TooltipWrapper>
              </div>
            </div>

            {/* Collapsible Documentation Section for Playwright */}
            <Collapsible className="mt-4">
              <CollapsibleTrigger className="flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors">
                <Info className="h-4 w-4" />
                Learn more about Playwright Dynamic Scraper
                <ChevronDown className="h-4 w-4 ml-auto" />
              </CollapsibleTrigger>
              <CollapsibleContent className="mt-4">
                <div className="space-y-4 p-4 bg-blue-50/50 dark:bg-blue-950/20 rounded-lg border border-blue-200/50 dark:border-blue-800/50">
                  <div>
                    <h4 className="font-semibold text-sm mb-2 flex items-center gap-2">
                      <Globe className="h-4 w-4 text-blue-500" />
                      About Playwright Dynamic Scraper
                    </h4>
                    <p className="text-xs text-muted-foreground">
                      Playwright is a powerful browser automation framework that provides full control
                      over Chrome, Firefox, and Safari. It excels at handling complex, dynamic websites
                      with advanced anti-bot protection and CAPTCHA challenges.
                    </p>
                  </div>

                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <h5 className="font-medium text-xs mb-2">Key Features</h5>
                      <ul className="space-y-1 text-xs text-muted-foreground">
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Full browser automation</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Stealth mode & fingerprinting</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Session persistence</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Proxy rotation support</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-green-500 mt-0.5">✓</span>
                          <span>Human-like behavior simulation</span>
                        </li>
                      </ul>
                    </div>

                    <div>
                      <h5 className="font-medium text-xs mb-2">Best For</h5>
                      <ul className="space-y-1 text-xs text-muted-foreground">
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Sites with anti-bot protection</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Login-required content</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>Complex user interactions</span>
                        </li>
                        <li className="flex items-start gap-1">
                          <span className="text-blue-500 mt-0.5">•</span>
                          <span>CAPTCHA-protected sites</span>
                        </li>
                      </ul>
                    </div>
                  </div>

                  <Alert className="bg-blue-100/50 dark:bg-blue-900/20 border-blue-200">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription className="text-xs">
                      <strong>Performance:</strong> Slower than Cheerio but handles JavaScript perfectly.
                      Uses real browser instances for maximum compatibility.
                    </AlertDescription>
                  </Alert>
                </div>
              </CollapsibleContent>
            </Collapsible>
          </TabsContent>

          {/* Cheerio features */}
          <TabsContent value="cheerio" className="space-y-4 mt-4">
            <div className="p-4 bg-accent/50 rounded-lg">
              <p className="text-sm text-muted-foreground">
                Cheerio provides fast, lightweight HTML parsing without browser overhead.
                Best for simple, static sites without JavaScript rendering requirements.
              </p>
              <div className="mt-3 flex items-center gap-2 text-xs">
                <CheckCircle2 className="h-3 w-3 text-green-500" />
                <span>10x faster than browser-based scrapers</span>
              </div>
              <div className="mt-1 flex items-center gap-2 text-xs">
                <AlertCircle className="h-3 w-3 text-yellow-500" />
                <span>No JavaScript execution support</span>
              </div>
            </div>
          </TabsContent>
        </Tabs>

        {/* Resource limits */}
        <div className="space-y-4 pt-4 border-t">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="gap-2"
          >
            <Settings className="h-4 w-4" />
            Advanced Settings
            <ChevronDown className={cn(
              "h-4 w-4 transition-transform",
              showAdvanced && "rotate-180"
            )} />
          </Button>

          <AnimatePresence>
            {showAdvanced && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="space-y-4"
              >
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label className="text-sm">Max Pages: {limits.maxPages}</Label>
                    <Slider
                      value={[limits.maxPages]}
                      onValueChange={([v]) => setLimits({ ...limits, maxPages: v })}
                      min={1}
                      max={100}
                      step={1}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Max Depth: {limits.maxDepth}</Label>
                    <Slider
                      value={[limits.maxDepth]}
                      onValueChange={([v]) => setLimits({ ...limits, maxDepth: v })}
                      min={1}
                      max={5}
                      step={1}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Timeout: {limits.timeout / 1000}s</Label>
                    <Slider
                      value={[limits.timeout / 1000]}
                      onValueChange={([v]) => setLimits({ ...limits, timeout: v * 1000 })}
                      min={10}
                      max={120}
                      step={10}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Budget: ${limits.budget}</Label>
                    <Slider
                      value={[limits.budget]}
                      onValueChange={([v]) => setLimits({ ...limits, budget: v })}
                      min={0.1}
                      max={10}
                      step={0.1}
                    />
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </CardContent>
    </Card>
  )
}

// Add missing import for ChevronDown
import { ChevronDown } from 'lucide-react'