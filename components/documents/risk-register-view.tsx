import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { AlertTriangle, TrendingUp, Shield, Activity } from 'lucide-react'

interface Risk {
  id: string
  category: string
  description: string
  probability: string
  impact: string
  score?: number
  proximity?: string
  response?: string
  responseActions?: string[]
  owner?: string
  status?: string
  mitigation?: string
}

interface RiskRegisterViewProps {
  content: {
    risks?: Risk[]
  }
  showBranding?: boolean
  brandingText?: string
}

export function RiskRegisterView({ content, showBranding = true, brandingText = "Generated by Project Genie" }: RiskRegisterViewProps) {
  if (!content?.risks) return null

  const getRiskLevel = (probability: string, impact: string) => {
    const probScore = ['very_low', 'low', 'medium', 'high', 'very_high'].indexOf(probability.toLowerCase()) + 1
    const impactScore = ['very_low', 'low', 'medium', 'high', 'very_high'].indexOf(impact.toLowerCase()) + 1
    const score = probScore * impactScore
    
    if (score >= 16) return { level: 'Critical', color: 'bg-red-500' }
    if (score >= 10) return { level: 'High', color: 'bg-orange-500' }
    if (score >= 6) return { level: 'Medium', color: 'bg-yellow-500' }
    return { level: 'Low', color: 'bg-green-500' }
  }

  const getCategoryIcon = (category: string) => {
    switch (category?.toLowerCase()) {
      case 'technical': return <Activity className="h-4 w-4" />
      case 'financial': return <TrendingUp className="h-4 w-4" />
      case 'operational': return <Shield className="h-4 w-4" />
      default: return <AlertTriangle className="h-4 w-4" />
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category?.toLowerCase()) {
      case 'technical': return 'bg-blue-100 text-blue-800'
      case 'financial': return 'bg-green-100 text-green-800'
      case 'operational': return 'bg-purple-100 text-purple-800'
      case 'strategic': return 'bg-indigo-100 text-indigo-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  // Calculate risk statistics
  const totalRisks = content.risks.length
  const highRisks = content.risks.filter(r => 
    getRiskLevel(r.probability, r.impact).level === 'High' || 
    getRiskLevel(r.probability, r.impact).level === 'Critical'
  ).length
  const activeRisks = content.risks.filter(r => r.status !== 'closed').length

  return (
    <div className="space-y-6 p-6 bg-white rounded-lg">
      {/* Header */}
      <div className="text-center space-y-2">
        <div className="flex justify-center mb-4">
          <AlertTriangle className="h-12 w-12 text-red-600" />
        </div>
        <h1 className="text-3xl font-bold">Risk Register</h1>
        <p className="text-gray-600">Project Risk Assessment and Mitigation Plan</p>
      </div>

      {/* Risk Summary */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Total Risks</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalRisks}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">High/Critical</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{highRisks}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Active Risks</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">{activeRisks}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Mitigated</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {totalRisks - activeRisks}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Risk Matrix */}
      <Card>
        <CardHeader>
          <CardTitle>Risk Matrix</CardTitle>
          <CardDescription>Probability vs Impact Assessment</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-6 gap-1 text-xs">
            <div className="font-semibold p-2"></div>
            <div className="text-center p-2 font-semibold">Very Low</div>
            <div className="text-center p-2 font-semibold">Low</div>
            <div className="text-center p-2 font-semibold">Medium</div>
            <div className="text-center p-2 font-semibold">High</div>
            <div className="text-center p-2 font-semibold">Very High</div>
            
            {['Very High', 'High', 'Medium', 'Low', 'Very Low'].map((prob) => (
              <React.Fragment key={prob}>
                <div className="font-semibold p-2 text-right">{prob}</div>
                {['very_low', 'low', 'medium', 'high', 'very_high'].map((imp) => {
                  const risksInCell = content.risks.filter(r => 
                    r.probability.toLowerCase().replace(' ', '_') === prob.toLowerCase().replace(' ', '_') &&
                    r.impact.toLowerCase().replace(' ', '_') === imp
                  ).length
                  const level = getRiskLevel(prob.toLowerCase().replace(' ', '_'), imp)
                  return (
                    <div 
                      key={`${prob}-${imp}`}
                      className={`p-2 text-center ${level.color} bg-opacity-20 border ${
                        risksInCell > 0 ? 'font-bold' : ''
                      }`}
                    >
                      {risksInCell > 0 ? risksInCell : '-'}
                    </div>
                  )
                })}
              </React.Fragment>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Risk Details Table */}
      <Card>
        <CardHeader>
          <CardTitle>Risk Details</CardTitle>
          <CardDescription>Complete risk assessment with mitigation strategies</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>ID</TableHead>
                  <TableHead>Category</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Probability</TableHead>
                  <TableHead>Impact</TableHead>
                  <TableHead>Risk Level</TableHead>
                  <TableHead>Mitigation</TableHead>
                  <TableHead>Owner</TableHead>
                  <TableHead>Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {content.risks.map((risk) => {
                  const riskLevel = getRiskLevel(risk.probability, risk.impact)
                  return (
                    <TableRow key={risk.id}>
                      <TableCell className="font-medium">{risk.id}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {getCategoryIcon(risk.category)}
                          <Badge className={getCategoryColor(risk.category)} variant="secondary">
                            {risk.category}
                          </Badge>
                        </div>
                      </TableCell>
                      <TableCell className="max-w-xs">
                        <p className="line-clamp-2">{risk.description}</p>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="capitalize">
                          {risk.probability.replace('_', ' ')}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="capitalize">
                          {risk.impact.replace('_', ' ')}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge className={`${riskLevel.color} text-white`}>
                          {riskLevel.level}
                        </Badge>
                      </TableCell>
                      <TableCell className="max-w-xs">
                        <p className="text-sm line-clamp-2">
                          {risk.mitigation || risk.responseActions?.[0] || 'TBD'}
                        </p>
                      </TableCell>
                      <TableCell>{risk.owner || 'Unassigned'}</TableCell>
                      <TableCell>
                        <Badge variant={risk.status === 'active' ? 'default' : 'secondary'}>
                          {risk.status || 'Active'}
                        </Badge>
                      </TableCell>
                    </TableRow>
                  )
                })}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      {/* Response Strategies */}
      <Card>
        <CardHeader>
          <CardTitle>Response Strategies</CardTitle>
          <CardDescription>Detailed mitigation and response plans</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {content.risks
              .filter(r => getRiskLevel(r.probability, r.impact).level === 'High' || 
                          getRiskLevel(r.probability, r.impact).level === 'Critical')
              .map((risk) => (
                <div key={risk.id} className="border rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h3 className="font-semibold">{risk.id}: {risk.description}</h3>
                      <div className="flex gap-2 mt-1">
                        <Badge className={getCategoryColor(risk.category)} variant="secondary">
                          {risk.category}
                        </Badge>
                        <Badge className={`${getRiskLevel(risk.probability, risk.impact).color} text-white`}>
                          {getRiskLevel(risk.probability, risk.impact).level} Risk
                        </Badge>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 space-y-2">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Response Strategy:</p>
                      <p className="text-sm">{risk.response || 'Mitigate'}</p>
                    </div>
                    
                    {risk.responseActions && risk.responseActions.length > 0 && (
                      <div>
                        <p className="text-sm font-medium text-gray-600">Action Items:</p>
                        <ul className="list-disc pl-5 text-sm space-y-1">
                          {risk.responseActions.map((action, idx) => (
                            <li key={idx}>{action}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    <div>
                      <p className="text-sm font-medium text-gray-600">Risk Owner:</p>
                      <p className="text-sm">{risk.owner || 'To be assigned'}</p>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </CardContent>
      </Card>

      {/* Branding Footer */}
      {showBranding && (
        <div className="text-center pt-6 border-t">
          <p className="text-sm text-gray-500">{brandingText}</p>
        </div>
      )}
    </div>
  )
}

import React from 'react'