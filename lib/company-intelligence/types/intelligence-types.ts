// lib/company-intelligence/types/intelligence-types-v4-COMPLIANT.ts
/**
 * V4 COMPLIANT Intelligence Types
 * All enum values are lowercase for database compatibility
 */

import {
  IntelligenceCategory,
  IntelligenceDepth,
  ScraperType,
  SessionPhase,
  ExtractionStatus
} from './intelligence-enums'

// Core intelligence item structure
export interface IntelligenceItem {
  id: string // Generated by PostgreSQL gen_random_uuid()
  session_id: string
  url: string
  category: IntelligenceCategory // Will be lowercase enum value
  title: string
  description?: string
  content?: string
  extracted_data: Record<string, any>
  confidence_score: number // 0-1 range
  extraction_status: ExtractionStatus // Will be lowercase enum value
  extraction_errors?: string[]
  metadata?: Record<string, any>
  processing_time_ms?: number
  created_at: string
  updated_at: string
}

// Scraping session structure
export interface ScrapingSession {
  id: string // Generated by PostgreSQL
  company_id: string
  domain: string
  depth: IntelligenceDepth // Will be 'quick', 'standard', 'deep', or 'competitive'
  scraper_type: ScraperType // Will be 'firecrawl' or 'playwright'
  intelligence_categories: IntelligenceCategory[] // Array of lowercase values
  phase: SessionPhase // Will be lowercase phase value
  status: 'active' | 'completed' | 'failed' | 'cancelled'
  pages_scraped: number
  items_found: number
  total_credits_estimated: number
  total_credits_used?: number
  max_pages?: number
  exclude_patterns?: string[]
  include_patterns?: string[]
  extraction_schema?: Record<string, any>
  extraction_completed_at?: string
  webhook_url?: string
  metadata?: Record<string, any>
  error?: string
  created_at: string
  updated_at: string
  created_by: string
}

// Company structure
export interface Company {
  id: string
  domain: string
  name: string
  created_at: string
  created_by: string
}

// User profile with credits
export interface UserProfile {
  id: string
  credits_balance: number
  total_credits_used: number
  updated_at: string
}

// Category data structure for organizing items
export interface CategoryData {
  category: IntelligenceCategory // Lowercase enum value
  items: IntelligenceItem[]
  itemCount: number
  confidence: number
  extractedAt: string
}

// Main intelligence data structure
export interface IntelligenceData {
  sessionId: string
  companyId: string
  companyDomain: string
  categories: Map<IntelligenceCategory, CategoryData>
  metadata: {
    scrapedAt: string
    lastUpdated: string
    scraperType: ScraperType // Will be lowercase
    totalPages: number
    depth: IntelligenceDepth // Will be lowercase
    phase: SessionPhase // Will be lowercase
    creditsUsed: number
  }
}

// Scraper configuration
export interface ScraperConfig {
  categories: IntelligenceCategory[] // Array of lowercase enum values
  depth: IntelligenceDepth // Lowercase enum value
  scraperType: ScraperType // Lowercase enum value
  maxPages?: number
  includeSubdomains?: boolean
  excludePatterns?: string[]
  includePatterns?: string[]
  customSelectors?: Record<string, string>
  waitForSelector?: string
  timeout?: number
  webhookUrl?: string
  extractionSchema?: Record<string, any>
}

// API Request types
export interface ScrapingRequest {
  domain: string
  categories: IntelligenceCategory[] // Must be lowercase values
  depth: IntelligenceDepth // Must be lowercase value
  scraperType?: ScraperType // Must be lowercase value
  maxPages?: number
  excludePatterns?: string[]
  includePatterns?: string[]
  customSchema?: Record<string, any>
  webhookUrl?: string
  metadata?: Record<string, any>
}

// API Response types
export interface ScrapingResponse {
  sessionId: string
  status: 'started' | 'queued' | 'error'
  estimatedCredits: number
  estimatedTime: number
  message?: string
  error?: string
}

export interface SessionResponse {
  id: string
  companyId: string
  domain: string
  depth: IntelligenceDepth // Lowercase value
  scraperType: ScraperType // Lowercase value
  categories: IntelligenceCategory[] // Lowercase values
  phase: SessionPhase // Lowercase value
  status: string
  pagesScraped: number
  itemsFound: number
  creditsUsed: number
  createdAt: string
  updatedAt: string
}

// Enrichment types
export interface EnrichmentRequest {
  sessionId: string
  items: IntelligenceItem[]
  model?: 'gpt-4' | 'gpt-3.5-turbo' | 'claude-3'
  temperature?: number
  extractStructured?: boolean
  userId: string
}

export interface EnrichmentResponse {
  itemId: string
  enrichedData: any
  confidence: number
  suggestedTags?: string[]
  suggestedCategory?: IntelligenceCategory // Will be lowercase
  needsReview?: boolean
}

// Analytics types
export interface AnalyticsData {
  categoryDistribution: Array<{
    category: IntelligenceCategory // Lowercase value
    count: number
    enriched: number
    pending: number
  }>
  confidenceDistribution: {
    high: number
    medium: number
    low: number
  }
  extractionTimeline: Array<{
    date: string
    count: number
  }>
  topSources: Array<{
    domain: string
    count: number
  }>
}

// Validation helpers
export function validateScrapingRequest(request: ScrapingRequest): boolean {
  // Check categories are valid lowercase values
  const validCategories = request.categories.every(cat => 
    Object.values(IntelligenceCategory).includes(cat)
  )
  
  // Check depth is valid lowercase value
  const validDepth = Object.values(IntelligenceDepth).includes(request.depth)
  
  // Check scraper type if provided
  const validScraper = !request.scraperType || 
    Object.values(ScraperType).includes(request.scraperType)
  
  return validCategories && validDepth && validScraper
}

// Helper to ensure lowercase enum values
export function ensureLowercaseEnums<T extends Record<string, any>>(data: T): T {
  const result = { ...data }
  
  // Fix known enum fields
  if ('category' in result && typeof result.category === 'string') {
    result.category = result.category.toLowerCase() as any
  }
  if ('categories' in result && Array.isArray(result.categories)) {
    result.categories = result.categories.map(c => c.toLowerCase()) as any
  }
  if ('depth' in result && typeof result.depth === 'string') {
    result.depth = result.depth.toLowerCase() as any
  }
  if ('scraperType' in result && typeof result.scraperType === 'string') {
    result.scraperType = result.scraperType.toLowerCase() as any
  }
  if ('scraper_type' in result && typeof result.scraper_type === 'string') {
    result.scraper_type = result.scraper_type.toLowerCase() as any
  }
  if ('phase' in result && typeof result.phase === 'string') {
    result.phase = result.phase.toLowerCase() as any
  }
  if ('extractionStatus' in result && typeof result.extractionStatus === 'string') {
    result.extractionStatus = result.extractionStatus.toLowerCase() as any
  }
  if ('extraction_status' in result && typeof result.extraction_status === 'string') {
    result.extraction_status = result.extraction_status.toLowerCase() as any
  }
  
  return result
}

// Type-safe enum value getters
export const getCategory = (value: string): IntelligenceCategory => {
  const lowercase = value.toLowerCase()
  if (Object.values(IntelligenceCategory).includes(lowercase as IntelligenceCategory)) {
    return lowercase as IntelligenceCategory
  }
  throw new Error(`Invalid category: ${value}`)
}

export const getDepth = (value: string): IntelligenceDepth => {
  const lowercase = value.toLowerCase()
  if (Object.values(IntelligenceDepth).includes(lowercase as IntelligenceDepth)) {
    return lowercase as IntelligenceDepth
  }
  throw new Error(`Invalid depth: ${value}`)
}

export const getScraperType = (value: string): ScraperType => {
  const lowercase = value.toLowerCase()
  if (Object.values(ScraperType).includes(lowercase as ScraperType)) {
    return lowercase as ScraperType
  }
  throw new Error(`Invalid scraper type: ${value}`)
}

// Export everything
export * from './intelligence-enums' // Re-export all enums
export default {
  validateScrapingRequest,
  ensureLowercaseEnums,
  getCategory,
  getDepth,
  getScraperType
}
