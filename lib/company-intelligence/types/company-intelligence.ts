// types/company-intelligence.ts
/**
 * Company Intelligence V4 TypeScript Type Definitions
 * CLAUDE.md Compliant - All types for the entire system
 */

import { 
  IntelligenceCategory, 
  ScraperType, 
  IntelligenceDepth,
  ScrapingPhase,
  ProcessingStatus,
  ConfidenceLevel,
  EnrichmentPriority,
  ReportFormat
} from '@/lib/company-intelligence/types/intelligence-enums'

// Database Types
export interface CompanyIntelligenceSession {
  id: string // Generated by PostgreSQL
  user_id: string
  domain: string
  scraper_type: ScraperType
  depth: IntelligenceDepth
  phase: ScrapingPhase
  status: ProcessingStatus
  intelligence_categories: Record<IntelligenceCategory, any>
  enrichment_queue: EnrichmentQueueItem[]
  total_credits_used: number
  extraction_completed_at: string | null
  created_at: string
  updated_at: string
  metadata: Record<string, any>
}

export interface ScrapingSession {
  id: string // Generated by PostgreSQL
  user_id: string
  domain: string
  status: 'active' | 'completed' | 'failed' | 'cancelled'
  metadata: Record<string, any>
  created_at: string
  completed_at: string | null
}

export interface CompanyIntelligence {
  id: string // Generated by PostgreSQL
  session_id: string
  category: IntelligenceCategory
  confidence: number
  content: Record<string, any>
  metadata: Record<string, any>
  source_url: string | null
  created_at: string
  updated_at: string
}

export interface EnrichmentQueueItem {
  id: string // Generated by PostgreSQL
  session_id: string
  intelligence_item: Record<string, any>
  category: string
  status: 'pending' | 'processing' | 'completed' | 'failed'
  credits_estimated: number
  enriched_data: Record<string, any> | null
  error: string | null
  created_at: string
  enriched_at: string | null
}

// API Request/Response Types
export interface ScrapingRequest {
  domain: string
  options?: {
    scraperType?: ScraperType
    depth?: IntelligenceDepth
    categories?: IntelligenceCategory[]
    maxPages?: number
    useFirecrawl?: boolean
    useProxy?: boolean
  }
}

export interface ScrapingResponse {
  success: boolean
  sessionId: string
  results?: {
    pagesCount: number
    itemsCount: number
    categories: string[]
  }
  error?: string
}

export interface IntelligenceItem {
  category: IntelligenceCategory
  confidence: number
  content: any
  sourceUrl?: string
  extractedAt: Date
}

export interface ExtractionResult {
  domain: string
  sessionId: string
  items: IntelligenceItem[]
  totalPages: number
  totalItems: number
  duration: number
  errors: string[]
}

// UI Component Types
export interface KanbanColumn {
  id: IntelligenceCategory
  title: string
  items: IntelligenceItem[]
  color: string
}

export interface SchemaBuilderConfig {
  selectedCategories: IntelligenceCategory[]
  depth: IntelligenceDepth
  scraperType: ScraperType
  estimatedCredits: number
  maxPages: number
}

export interface CostEstimate {
  baseCredits: number
  depthMultiplier: number
  categoryCredits: number
  totalCredits: number
  breakdown: {
    category: IntelligenceCategory
    credits: number
  }[]
}

// SSE Event Types
export interface SSEEvent {
  id: string
  type: string
  data: any
  timestamp: number
}

export interface ScrapingProgressEvent {
  phase: ScrapingPhase
  current: number
  total: number
  message: string
  percentage: number
}

export interface IntelligenceUpdateEvent {
  category: IntelligenceCategory
  itemsAdded: number
  totalItems: number
  confidence: number
}

// Scraper Configuration Types
export interface StreamingScraperConfig {
  domain: string
  maxPages: number
  depth: IntelligenceDepth
  categories: IntelligenceCategory[]
  timeout?: number
  rateLimit?: {
    requests: number
    period: number
  }
  headers?: Record<string, string>
  cookies?: Record<string, string>
}

export interface FirecrawlConfig extends StreamingScraperConfig {
  apiKey: string
  formats?: ('markdown' | 'html' | 'extract' | 'links')[]
  onlyMainContent?: boolean
  useProxy?: boolean
}

export interface PlaywrightConfig extends StreamingScraperConfig {
  headless: boolean
  viewport: {
    width: number
    height: number
  }
  userAgent?: string
  waitForSelector?: string
  scrollToBottom?: boolean
  screenshot?: boolean
}

// Repository Method Types
export interface GetIntelligenceOptions {
  sessionId?: string
  domain?: string
  categories?: IntelligenceCategory[]
  minConfidence?: number
  limit?: number
  offset?: number
}

export interface CreateIntelligenceData {
  category: IntelligenceCategory
  content: any
  confidence: number
  sourceUrl?: string
}

export interface UpdateSessionData {
  phase?: ScrapingPhase
  status?: ProcessingStatus
  metadata?: Record<string, any>
  totalCreditsUsed?: number
  intelligenceCategories?: Record<IntelligenceCategory, any>
}

// Analytics Types
export interface IntelligenceAnalytics {
  totalSessions: number
  totalItems: number
  categoryCounts: Record<IntelligenceCategory, number>
  averageConfidence: number
  creditUsage: {
    total: number
    byCategory: Record<IntelligenceCategory, number>
  }
  scraperUsage: Record<ScraperType, number>
  depthDistribution: Record<IntelligenceDepth, number>
}

// Enrichment Types
export interface EnrichmentRequest {
  sessionId: string
  items: IntelligenceItem[]
  priority: EnrichmentPriority
  maxCredits?: number
}

export interface EnrichmentResult {
  itemId: string
  originalData: any
  enrichedData: any
  creditsUsed: number
  confidence: number
  sources: string[]
}

// Report Generation Types
export interface ReportGenerationRequest {
  sessionId: string
  format: ReportFormat
  sections: IntelligenceCategory[]
  includeAnalytics?: boolean
  includeRecommendations?: boolean
  customPrompt?: string
}

export interface GeneratedReport {
  id: string
  sessionId: string
  format: ReportFormat
  content: string | Buffer
  metadata: {
    generatedAt: string
    creditsUsed: number
    wordCount: number
    sections: string[]
  }
  downloadUrl?: string
}

// Error Types
export interface IntelligenceError {
  code: string
  message: string
  details?: any
  timestamp: string
  sessionId?: string
  category?: IntelligenceCategory
}

// Utility Types
export type PartialIntelligence = Partial<CompanyIntelligence>
export type IntelligenceCategoryMap = Map<IntelligenceCategory, IntelligenceItem[]>
export type CreditsCalculator = (categories: IntelligenceCategory[], depth: IntelligenceDepth) => number
