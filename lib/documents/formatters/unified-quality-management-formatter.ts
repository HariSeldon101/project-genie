/**
 * Unified Quality Management Formatter
 * 
 * This formatter generates HTML output for Quality Management Strategy documents
 * that works consistently in both the document viewer and PDF generation.
 */

import { BaseUnifiedFormatter, DocumentMetadata } from './base-unified-formatter'

interface QualityManagementData {
  qualityObjectives?: any
  qualityStandards?: any[]
  qualityProcesses?: any
  qualityMetrics?: any[]
  qualityAssurance?: any
  qualityControl?: any
  testingStrategy?: any
  defectManagement?: any
  continuousImprovement?: any
  [key: string]: any
}

export class UnifiedQualityManagementFormatter extends BaseUnifiedFormatter<QualityManagementData> {
  protected ensureStructure(data: any): QualityManagementData {
    return {
      objectives: data?.objectives || [],
      standards: data?.standards || [],
      processes: data?.processes || [],
      metrics: data?.metrics || [],
      roles: data?.roles || [],
      reviewProcess: data?.reviewProcess || {},
      testingStrategy: data?.testingStrategy || {},
      defectManagement: data?.defectManagement || {},
      continuousImprovement: data?.continuousImprovement || {},
      tools: data?.tools || [],
      training: data?.training || {},
      documentation: data?.documentation || {},
      ...data
    }
  }
  
  constructor(data: QualityManagementData, metadata: DocumentMetadata) {
    super(data, metadata)
  }

  generateHTML(): string {
    const sections: string[] = []
    
    sections.push(this.generateCoverPage())
    sections.push(this.generateTableOfContents())
    sections.push(this.generateExecutiveSummary())
    sections.push(this.generateQualityObjectives())
    sections.push(this.generateQualityStandards())
    sections.push(this.generateQualityProcesses())
    sections.push(this.generateQualityMetrics())
    sections.push(this.generateQualityAssurance())
    sections.push(this.generateQualityControl())
    sections.push(this.generateTestingStrategy())
    sections.push(this.generateDefectManagement())
    sections.push(this.generateContinuousImprovement())
    sections.push(this.generateRolesResponsibilities())
    sections.push(this.generateAppendices())
    
    // Return simple div-wrapped HTML like PID does
    return `
      <div class="quality-management-document">
        ${sections.join('\n')}
      </div>
    `
  }

  private generateCoverPage(): string {
    return `
      <div class="cover-page">
        <div class="cover-logo">
          <svg width="200" height="60" viewBox="0 0 200 60" preserveAspectRatio="xMidYMid meet">
            <text x="100" y="35" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#667eea" text-anchor="middle">
              Project Genie ðŸ§ž
            </text>
          </svg>
        </div>
        
        <h1 class="cover-title">Quality Management Strategy</h1>
        <h2 class="cover-subtitle">${this.metadata.projectName}</h2>
        
        <div class="cover-metadata">
          <p class="cover-metadata-item"><strong>Company:</strong> ${this.metadata.companyName}</p>
          <p class="cover-metadata-item"><strong>Date:</strong> ${this.metadata.date}</p>
          <p class="cover-metadata-item"><strong>Version:</strong> ${this.metadata.version}</p>
          ${this.metadata.author ? `<p class="cover-metadata-item"><strong>Generated by:</strong> ${this.metadata.author}</p>` : ''}
        </div>
      </div>
    `
  }

  protected generateTableOfContents(): string {
    return `
      <section class="table-of-contents">
        <h2>ðŸ“‘ Table of Contents</h2>
        <ol>
          <li><a href="#executive-summary">Executive Summary</a></li>
          <li><a href="#quality-objectives">Quality Objectives</a></li>
          <li><a href="#quality-standards">Quality Standards</a></li>
          <li><a href="#quality-processes">Quality Processes</a></li>
          <li><a href="#quality-metrics">Quality Metrics</a></li>
          <li><a href="#quality-assurance">Quality Assurance</a></li>
          <li><a href="#quality-control">Quality Control</a></li>
          <li><a href="#testing-strategy">Testing Strategy</a></li>
          <li><a href="#defect-management">Defect Management</a></li>
          <li><a href="#continuous-improvement">Continuous Improvement</a></li>
          <li><a href="#roles-responsibilities">Roles & Responsibilities</a></li>
          <li><a href="#appendices">Appendices</a></li>
        </ol>
      </section>
    `
  }

  private generateExecutiveSummary(): string {
    return `
      <section class="document-section" id="executive-summary">
        <h2>1. Executive Summary</h2>
        
        <p>This Quality Management Strategy establishes the framework for ensuring the ${this.metadata.projectName} project delivers 
        high-quality outcomes that meet stakeholder expectations and comply with relevant standards. It defines the processes, 
        metrics, and responsibilities for maintaining quality throughout the project lifecycle.</p>
        
        <div class="key-highlights">
          <h3>âœ¨ Quality Commitment</h3>
          <ul>
            <li>Zero critical defects in production</li>
            <li>Code coverage target: >80%</li>
            <li>Customer satisfaction score: >90%</li>
            <li>Compliance with industry standards</li>
          </ul>
        </div>
        
        ${this.data.executiveSummary ? this.formatContent(this.data.executiveSummary) : ''}
      </section>
    `
  }

  private generateQualityObjectives(): string {
    return `
      <section class="document-section" id="quality-objectives">
        <h2>2. Quality Objectives</h2>
        
        ${this.data.qualityObjectives ? this.formatContent(this.data.qualityObjectives) : `
          <h3>2.1 Primary Objectives</h3>
          <ul>
            <li>Deliver products that meet or exceed requirements</li>
            <li>Minimize defects and rework</li>
            <li>Ensure compliance with standards and regulations</li>
            <li>Achieve high customer satisfaction</li>
            <li>Foster a culture of continuous improvement</li>
          </ul>
          
          <h3>2.2 SMART Goals</h3>
          <table class="goals-table">
            <thead>
              <tr>
                <th>Goal</th>
                <th>Target</th>
                <th>Timeline</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Defect Density</td>
                <td>&lt; 0.5 per KLOC</td>
                <td>By Release</td>
              </tr>
              <tr>
                <td>Test Coverage</td>
                <td>&gt; 80%</td>
                <td>Sprint End</td>
              </tr>
              <tr>
                <td>Code Review</td>
                <td>100% of changes</td>
                <td>Continuous</td>
              </tr>
              <tr>
                <td>Performance</td>
                <td>&lt; 2s response time</td>
                <td>By Release</td>
              </tr>
            </tbody>
          </table>
        `}
      </section>
    `
  }

  private generateQualityStandards(): string {
    const standards = this.data.qualityStandards || []
    
    let content = `
      <section class="document-section" id="quality-standards">
        <h2>3. Quality Standards</h2>
    `

    if (standards.length > 0) {
      content += `
        <div class="standards-grid">
          ${standards.map(standard => `
            <div class="standard-card">
              <h3>${standard.name || standard}</h3>
              ${standard.description ? `<p>${standard.description}</p>` : ''}
              ${standard.compliance ? `<p><strong>Compliance:</strong> ${standard.compliance}</p>` : ''}
            </div>
          `).join('')}
        </div>
      `
    } else {
      content += `
        <h3>3.1 Industry Standards</h3>
        <ul>
          <li><strong>ISO 9001:</strong> Quality Management System</li>
          <li><strong>ISO 27001:</strong> Information Security Management</li>
          <li><strong>CMMI:</strong> Capability Maturity Model Integration</li>
          <li><strong>Agile Manifesto:</strong> Agile development principles</li>
        </ul>
        
        <h3>3.2 Coding Standards</h3>
        <ul>
          <li>Language-specific style guides</li>
          <li>Security coding practices (OWASP)</li>
          <li>Documentation standards</li>
          <li>Version control conventions</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateQualityProcesses(): string {
    return `
      <section class="document-section" id="quality-processes">
        <h2>4. Quality Processes</h2>
        
        ${this.data.qualityProcesses ? this.formatContent(this.data.qualityProcesses) : `
          <div class="process-flow">
            ${this.options.includeCharts ? this.createMermaidChart('graph', `
graph LR
    A[Requirements] --> B[Design Review]
    B --> C[Development]
    C --> D[Code Review]
    D --> E[Testing]
    E --> F[Approval]
    F --> G[Release]
    
    D --> H[Rework]
    H --> C
    E --> I[Defects]
    I --> C
            `) : ''}
          </div>
          
          <h3>4.1 Process Gates</h3>
          <table class="process-table">
            <thead>
              <tr>
                <th>Gate</th>
                <th>Criteria</th>
                <th>Approver</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Requirements Complete</td>
                <td>All requirements documented and approved</td>
                <td>Product Owner</td>
              </tr>
              <tr>
                <td>Design Review</td>
                <td>Design meets requirements and standards</td>
                <td>Tech Lead</td>
              </tr>
              <tr>
                <td>Code Complete</td>
                <td>All features implemented and reviewed</td>
                <td>Development Lead</td>
              </tr>
              <tr>
                <td>Testing Complete</td>
                <td>All tests passed, coverage met</td>
                <td>QA Lead</td>
              </tr>
              <tr>
                <td>Release Ready</td>
                <td>All criteria met, documentation complete</td>
                <td>Project Manager</td>
              </tr>
            </tbody>
          </table>
        `}
      </section>
    `
  }

  private generateQualityMetrics(): string {
    const metrics = this.data.qualityMetrics || []
    
    let content = `
      <section class="document-section" id="quality-metrics">
        <h2>5. Quality Metrics</h2>
    `

    if (metrics.length > 0) {
      content += `
        <table class="metrics-table">
          <thead>
            <tr>
              <th>Metric</th>
              <th>Target</th>
              <th>Measurement</th>
              <th>Frequency</th>
            </tr>
          </thead>
          <tbody>
            ${metrics.map(m => `
              <tr>
                <td><strong>${m.name || m}</strong></td>
                <td>${m.target || 'TBD'}</td>
                <td>${m.measurement || 'TBD'}</td>
                <td>${m.frequency || 'Sprint'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `
    } else {
      content += `
        <div class="metrics-dashboard">
          <div class="metric-card">
            <h3>ðŸ“Š Defect Density</h3>
            <p class="metric-value">&lt; 0.5</p>
            <p class="metric-unit">per KLOC</p>
          </div>
          <div class="metric-card">
            <h3>âœ… Test Coverage</h3>
            <p class="metric-value">&gt; 80%</p>
            <p class="metric-unit">of code</p>
          </div>
          <div class="metric-card">
            <h3>âš¡ Performance</h3>
            <p class="metric-value">&lt; 2s</p>
            <p class="metric-unit">response time</p>
          </div>
          <div class="metric-card">
            <h3>ðŸ˜Š Satisfaction</h3>
            <p class="metric-value">&gt; 90%</p>
            <p class="metric-unit">user rating</p>
          </div>
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateQualityAssurance(): string {
    return `
      <section class="document-section" id="quality-assurance">
        <h2>6. Quality Assurance</h2>
        
        ${this.data.qualityAssurance ? this.formatContent(this.data.qualityAssurance) : `
          <h3>6.1 QA Activities</h3>
          <ul>
            <li><strong>Process Audits:</strong> Regular audits of development processes</li>
            <li><strong>Standards Compliance:</strong> Verification of standards adherence</li>
            <li><strong>Documentation Review:</strong> Ensuring documentation completeness</li>
            <li><strong>Training:</strong> Team training on quality practices</li>
          </ul>
          
          <h3>6.2 Review Types</h3>
          <table class="review-table">
            <thead>
              <tr>
                <th>Review Type</th>
                <th>Purpose</th>
                <th>Participants</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Peer Review</td>
                <td>Code quality and standards</td>
                <td>Developers</td>
              </tr>
              <tr>
                <td>Technical Review</td>
                <td>Architecture and design</td>
                <td>Tech Lead, Architects</td>
              </tr>
              <tr>
                <td>Management Review</td>
                <td>Progress and compliance</td>
                <td>PM, Stakeholders</td>
              </tr>
              <tr>
                <td>Customer Review</td>
                <td>Requirements validation</td>
                <td>Customer, Product Owner</td>
              </tr>
            </tbody>
          </table>
        `}
      </section>
    `
  }

  private generateQualityControl(): string {
    return `
      <section class="document-section" id="quality-control">
        <h2>7. Quality Control</h2>
        
        ${this.data.qualityControl ? this.formatContent(this.data.qualityControl) : `
          <h3>7.1 Control Activities</h3>
          <ul>
            <li>Code inspections and reviews</li>
            <li>Unit and integration testing</li>
            <li>Performance testing</li>
            <li>Security testing</li>
            <li>User acceptance testing</li>
          </ul>
          
          <h3>7.2 Quality Gates</h3>
          <div class="gates-flow">
            <div class="gate">
              <h4>Entry Criteria</h4>
              <ul>
                <li>Requirements approved</li>
                <li>Resources available</li>
                <li>Environment ready</li>
              </ul>
            </div>
            <div class="gate">
              <h4>Exit Criteria</h4>
              <ul>
                <li>All tests passed</li>
                <li>No critical defects</li>
                <li>Documentation complete</li>
              </ul>
            </div>
          </div>
        `}
      </section>
    `
  }

  private generateTestingStrategy(): string {
    return `
      <section class="document-section" id="testing-strategy">
        <h2>8. Testing Strategy</h2>
        
        ${this.data.testingStrategy ? this.formatContent(this.data.testingStrategy) : `
          <h3>8.1 Testing Levels</h3>
          <div class="testing-pyramid">
            ${this.options.includeCharts ? this.createMermaidChart('graph', `
graph TB
    A[Unit Tests - 70%]
    B[Integration Tests - 20%]
    C[System Tests - 5%]
    D[UAT - 5%]
    
    A --> B
    B --> C
    C --> D
            `) : ''}
          </div>
          
          <h3>8.2 Test Types</h3>
          <table class="test-table">
            <thead>
              <tr>
                <th>Test Type</th>
                <th>Coverage</th>
                <th>Automation</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Unit Testing</td>
                <td>&gt; 80%</td>
                <td>100%</td>
              </tr>
              <tr>
                <td>Integration Testing</td>
                <td>&gt; 70%</td>
                <td>80%</td>
              </tr>
              <tr>
                <td>Performance Testing</td>
                <td>Critical paths</td>
                <td>100%</td>
              </tr>
              <tr>
                <td>Security Testing</td>
                <td>All interfaces</td>
                <td>50%</td>
              </tr>
              <tr>
                <td>UAT</td>
                <td>Business scenarios</td>
                <td>20%</td>
              </tr>
            </tbody>
          </table>
        `}
      </section>
    `
  }

  private generateDefectManagement(): string {
    return `
      <section class="document-section" id="defect-management">
        <h2>9. Defect Management</h2>
        
        ${this.data.defectManagement ? this.formatContent(this.data.defectManagement) : `
          <h3>9.1 Defect Lifecycle</h3>
          ${this.options.includeCharts ? this.createMermaidChart('graph', `
graph LR
    A[New] --> B[Assigned]
    B --> C[In Progress]
    C --> D[Fixed]
    D --> E[Testing]
    E --> F[Closed]
    E --> G[Reopened]
    G --> C
          `) : ''}
          
          <h3>9.2 Severity Levels</h3>
          <table class="severity-table">
            <thead>
              <tr>
                <th>Severity</th>
                <th>Description</th>
                <th>Response Time</th>
              </tr>
            </thead>
            <tbody>
              <tr class="critical">
                <td>Critical</td>
                <td>System down, data loss</td>
                <td>4 hours</td>
              </tr>
              <tr class="high">
                <td>High</td>
                <td>Major function impacted</td>
                <td>24 hours</td>
              </tr>
              <tr class="medium">
                <td>Medium</td>
                <td>Minor function impacted</td>
                <td>3 days</td>
              </tr>
              <tr class="low">
                <td>Low</td>
                <td>Cosmetic issue</td>
                <td>Next release</td>
              </tr>
            </tbody>
          </table>
        `}
      </section>
    `
  }

  private generateContinuousImprovement(): string {
    return `
      <section class="document-section" id="continuous-improvement">
        <h2>10. Continuous Improvement</h2>
        
        ${this.data.continuousImprovement ? this.formatContent(this.data.continuousImprovement) : `
          <h3>10.1 Improvement Process</h3>
          <ol>
            <li><strong>Measure:</strong> Collect quality metrics</li>
            <li><strong>Analyze:</strong> Identify improvement opportunities</li>
            <li><strong>Plan:</strong> Develop improvement initiatives</li>
            <li><strong>Implement:</strong> Execute improvements</li>
            <li><strong>Review:</strong> Assess effectiveness</li>
          </ol>
          
          <h3>10.2 Improvement Activities</h3>
          <ul>
            <li>Sprint retrospectives</li>
            <li>Root cause analysis</li>
            <li>Process optimization</li>
            <li>Tool evaluation and adoption</li>
            <li>Training and skill development</li>
          </ul>
        `}
      </section>
    `
  }

  private generateRolesResponsibilities(): string {
    return `
      <section class="document-section" id="roles-responsibilities">
        <h2>11. Roles & Responsibilities</h2>
        
        <table class="roles-table">
          <thead>
            <tr>
              <th>Role</th>
              <th>Responsibilities</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><strong>Quality Manager</strong></td>
              <td>Overall quality strategy and governance</td>
            </tr>
            <tr>
              <td><strong>QA Lead</strong></td>
              <td>Test planning and execution</td>
            </tr>
            <tr>
              <td><strong>Developers</strong></td>
              <td>Unit testing and code quality</td>
            </tr>
            <tr>
              <td><strong>Product Owner</strong></td>
              <td>Acceptance criteria and validation</td>
            </tr>
            <tr>
              <td><strong>Project Manager</strong></td>
              <td>Quality planning and monitoring</td>
            </tr>
          </tbody>
        </table>
      </section>
    `
  }

  private generateAppendices(): string {
    return `
      <section class="document-section page-break-before" id="appendices">
        <h2>12. Appendices</h2>
        
        <h3>Appendix A: Quality Checklists</h3>
        <ul>
          <li>Code Review Checklist</li>
          <li>Testing Checklist</li>
          <li>Release Checklist</li>
          <li>Documentation Checklist</li>
        </ul>
        
        <h3>Appendix B: Templates</h3>
        <ul>
          <li>Test Plan Template</li>
          <li>Defect Report Template</li>
          <li>Quality Report Template</li>
        </ul>
        
        <h3>Document Control</h3>
        <table>
          <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Author</th>
            <th>Changes</th>
          </tr>
          <tr>
            <td>${this.metadata.version || '1.0'}</td>
            <td>${this.metadata.date}</td>
            <td>${this.metadata.author || 'User'}</td>
            <td>Initial document generation</td>
          </tr>
        </table>
      </section>
    `
  }

  protected getDocumentSpecificStyles(): string {
    return `
      .goals-table,
      .process-table,
      .metrics-table,
      .review-table,
      .test-table,
      .severity-table,
      .roles-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
      }
      
      .goals-table th,
      .process-table th,
      .metrics-table th,
      .review-table th,
      .test-table th,
      .severity-table th,
      .roles-table th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.75rem;
        text-align: left;
      }
      
      .goals-table td,
      .process-table td,
      .metrics-table td,
      .review-table td,
      .test-table td,
      .severity-table td,
      .roles-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
      }
      
      .standards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }
      
      .standard-card {
        background: #f9f9f9;
        border-radius: 8px;
        padding: 1.5rem;
        border-left: 4px solid #4caf50;
      }
      
      .metrics-dashboard {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
      }
      
      .metric-card {
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
      }
      
      .metric-card h3 {
        margin-top: 0;
        color: #667eea;
      }
      
      .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #333;
        margin: 0.5rem 0;
      }
      
      .metric-unit {
        color: #666;
        font-size: 0.9rem;
      }
      
      .gates-flow {
        display: flex;
        justify-content: space-around;
        margin: 2rem 0;
      }
      
      .gate {
        background: #f5f5f5;
        border-radius: 8px;
        padding: 1.5rem;
        flex: 1;
        margin: 0 1rem;
      }
      
      .gate h4 {
        color: #667eea;
        margin-top: 0;
      }
      
      .severity-table tr.critical {
        background: #ffebee;
      }
      
      .severity-table tr.high {
        background: #fff3e0;
      }
      
      .severity-table tr.medium {
        background: #e3f2fd;
      }
      
      .severity-table tr.low {
        background: #e8f5e9;
      }
      
      .process-flow,
      .testing-pyramid {
        margin: 2rem 0;
        padding: 1rem;
        background: #f9f9f9;
        border-radius: 8px;
      }
    `
  }
}

export interface QualityManagementMetadata extends DocumentMetadata {}