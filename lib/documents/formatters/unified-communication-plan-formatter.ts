/**
 * Unified Communication Plan Formatter
 * 
 * This formatter generates HTML output for Communication Plan documents
 * that works consistently in both the document viewer and PDF generation.
 */

import { BaseUnifiedFormatter, DocumentMetadata } from './base-unified-formatter'

interface CommunicationPlanData {
  stakeholders?: any[]
  communicationMatrix?: any
  channels?: any[]
  meetings?: any[]
  reports?: any[]
  escalationPath?: any
  feedbackMechanisms?: any
  communicationRisks?: any[]
  [key: string]: any
}

export class UnifiedCommunicationPlanFormatter extends BaseUnifiedFormatter<CommunicationPlanData> {
  protected ensureStructure(data: any): CommunicationPlanData {
    return {
      purpose: data?.purpose || '',
      objectives: data?.objectives || [],
      stakeholders: data?.stakeholders || [],
      communicationMatrix: data?.communicationMatrix || [],
      channels: data?.channels || [],
      meetingCadence: data?.meetingCadence || [],
      escalationPath: data?.escalationPath || [],
      reportingStructure: data?.reportingStructure || {},
      feedbackMechanisms: data?.feedbackMechanisms || [],
      crisisCommunication: data?.crisisCommunication || {},
      ...data
    }
  }
  
  constructor(data: CommunicationPlanData, metadata: DocumentMetadata) {
    super(data, metadata)
  }

  generateHTML(): string {
    const sections: string[] = []
    
    sections.push(this.generateCoverPage())
    sections.push(this.generateTableOfContents())
    sections.push(this.generateExecutiveSummary())
    sections.push(this.generateCommunicationObjectives())
    sections.push(this.generateStakeholderAnalysis())
    sections.push(this.generateCommunicationMatrix())
    sections.push(this.generateCommunicationChannels())
    sections.push(this.generateMeetingCadence())
    sections.push(this.generateReportingStructure())
    sections.push(this.generateEscalationPath())
    sections.push(this.generateFeedbackMechanisms())
    sections.push(this.generateCommunicationRisks())
    sections.push(this.generateBestPractices())
    sections.push(this.generateAppendices())
    
    // Return simple div-wrapped HTML like PID does
    return `
      <div class="communication-plan-document">
        ${sections.join('\n')}
      </div>
    `
  }

  private generateCoverPage(): string {
    return `
      <div class="cover-page">
        <div class="cover-logo">
          <svg width="200" height="60" viewBox="0 0 200 60" preserveAspectRatio="xMidYMid meet">
            <text x="100" y="35" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#667eea" text-anchor="middle">
              Project Genie 🧞
            </text>
          </svg>
        </div>
        
        <h1 class="cover-title">Communication Management Approach</h1>
        <h2 class="cover-subtitle">${this.metadata.projectName}</h2>
        
        <div class="cover-metadata">
          <p class="cover-metadata-item"><strong>Company:</strong> ${this.metadata.companyName}</p>
          <p class="cover-metadata-item"><strong>Date:</strong> ${this.metadata.date}</p>
          <p class="cover-metadata-item"><strong>Version:</strong> ${this.metadata.version}</p>
          ${this.metadata.author ? `<p class="cover-metadata-item"><strong>Generated by:</strong> ${this.metadata.author}</p>` : ''}
        </div>
      </div>
    `
  }

  protected generateTableOfContents(): string {
    return `
      <section class="table-of-contents">
        <h2>📑 Table of Contents</h2>
        <ol>
          <li><a href="#executive-summary">Executive Summary</a></li>
          <li><a href="#communication-objectives">Communication Objectives</a></li>
          <li><a href="#stakeholder-analysis">Stakeholder Analysis</a></li>
          <li><a href="#communication-matrix">Communication Matrix</a></li>
          <li><a href="#communication-channels">Communication Channels</a></li>
          <li><a href="#meeting-cadence">Meeting Cadence</a></li>
          <li><a href="#reporting-structure">Reporting Structure</a></li>
          <li><a href="#escalation-path">Escalation Path</a></li>
          <li><a href="#feedback-mechanisms">Feedback Mechanisms</a></li>
          <li><a href="#communication-risks">Communication Risks</a></li>
          <li><a href="#best-practices">Best Practices</a></li>
          <li><a href="#appendices">Appendices</a></li>
        </ol>
      </section>
    `
  }

  private generateExecutiveSummary(): string {
    const stakeholders = this.data.stakeholders || []
    
    return `
      <section class="document-section" id="executive-summary">
        <h2>1. Executive Summary</h2>
        
        <p>This Communication Management Approach establishes the framework for effective communication throughout the ${this.metadata.projectName} project. 
        It defines how information will be distributed among ${stakeholders.length} key stakeholder groups, ensuring transparency, 
        alignment, and timely decision-making.</p>
        
        <div class="key-highlights">
          <h3>📢 Key Elements</h3>
          <ul>
            <li><strong>Stakeholder Groups:</strong> ${stakeholders.length} identified</li>
            <li><strong>Communication Channels:</strong> Multiple channels for different purposes</li>
            <li><strong>Meeting Rhythm:</strong> Structured cadence for all levels</li>
            <li><strong>Escalation Path:</strong> Clear routes for issue resolution</li>
          </ul>
        </div>
        
        ${this.data.executiveSummary ? this.formatContent(this.data.executiveSummary) : ''}
      </section>
    `
  }

  private generateCommunicationObjectives(): string {
    return `
      <section class="document-section" id="communication-objectives">
        <h2>2. Communication Objectives</h2>
        
        ${this.data.objectives ? this.formatContent(this.data.objectives) : `
          <h3>2.1 Primary Objectives</h3>
          <ul>
            <li>Ensure all stakeholders are informed of project progress and decisions</li>
            <li>Facilitate timely and effective decision-making</li>
            <li>Manage stakeholder expectations proactively</li>
            <li>Build and maintain stakeholder engagement</li>
            <li>Provide transparency in project execution</li>
          </ul>
          
          <h3>2.2 Success Metrics</h3>
          <ul>
            <li>Stakeholder satisfaction score > 80%</li>
            <li>Meeting attendance rate > 75%</li>
            <li>Response time to queries < 24 hours</li>
            <li>Zero communication-related project delays</li>
          </ul>
        `}
      </section>
    `
  }

  private generateStakeholderAnalysis(): string {
    const stakeholders = this.data.stakeholders || []
    
    let content = `
      <section class="document-section" id="stakeholder-analysis">
        <h2>3. Stakeholder Analysis</h2>
    `

    if (stakeholders.length > 0) {
      content += `
        <table class="stakeholder-table">
          <thead>
            <tr>
              <th>Stakeholder</th>
              <th>Role</th>
              <th>Interest</th>
              <th>Influence</th>
              <th>Communication Needs</th>
            </tr>
          </thead>
          <tbody>
            ${stakeholders.map(s => `
              <tr>
                <td><strong>${s.name || s}</strong></td>
                <td>${s.role || 'TBD'}</td>
                <td>${this.getInterestBadge(s.interest)}</td>
                <td>${this.getInfluenceBadge(s.influence)}</td>
                <td>${s.needs || 'Regular updates'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        ${this.options.includeCharts ? this.createMermaidChart('graph', `
graph LR
    subgraph "Power/Interest Grid"
        A[High Power/High Interest<br/>Manage Closely]
        B[High Power/Low Interest<br/>Keep Satisfied]
        C[Low Power/High Interest<br/>Keep Informed]
        D[Low Power/Low Interest<br/>Monitor]
    end
        `) : ''}
      `
    } else {
      content += `<p>Stakeholder analysis will be conducted during project initiation.</p>`
    }

    content += `</section>`
    return content
  }

  private generateCommunicationMatrix(): string {
    let content = `
      <section class="document-section" id="communication-matrix">
        <h2>4. Communication Matrix</h2>
    `

    if (this.data.communicationMatrix) {
      content += this.formatContent(this.data.communicationMatrix)
    } else {
      content += `
        <table class="matrix-table">
          <thead>
            <tr>
              <th>What</th>
              <th>Who</th>
              <th>When</th>
              <th>How</th>
              <th>Owner</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Project Status</td>
              <td>All Stakeholders</td>
              <td>Weekly</td>
              <td>Email Report</td>
              <td>Project Manager</td>
            </tr>
            <tr>
              <td>Technical Updates</td>
              <td>Development Team</td>
              <td>Daily</td>
              <td>Stand-up Meeting</td>
              <td>Tech Lead</td>
            </tr>
            <tr>
              <td>Risk Updates</td>
              <td>Steering Committee</td>
              <td>Bi-weekly</td>
              <td>Risk Report</td>
              <td>Risk Manager</td>
            </tr>
            <tr>
              <td>Budget Status</td>
              <td>Sponsors</td>
              <td>Monthly</td>
              <td>Financial Report</td>
              <td>Finance Lead</td>
            </tr>
            <tr>
              <td>Milestone Completion</td>
              <td>All Stakeholders</td>
              <td>As Achieved</td>
              <td>Email Announcement</td>
              <td>Project Manager</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateCommunicationChannels(): string {
    const channels = this.data.channels || []
    
    let content = `
      <section class="document-section" id="communication-channels">
        <h2>5. Communication Channels</h2>
    `

    if (channels.length > 0) {
      content += `
        <div class="channels-grid">
          ${channels.map(channel => `
            <div class="channel-card">
              <h3>${this.getChannelIcon(channel.type)} ${channel.name || channel}</h3>
              ${channel.purpose ? `<p><strong>Purpose:</strong> ${channel.purpose}</p>` : ''}
              ${channel.audience ? `<p><strong>Audience:</strong> ${channel.audience}</p>` : ''}
              ${channel.frequency ? `<p><strong>Frequency:</strong> ${channel.frequency}</p>` : ''}
            </div>
          `).join('')}
        </div>
      `
    } else {
      content += `
        <div class="channels-grid">
          <div class="channel-card">
            <h3>📧 Email</h3>
            <p>Formal communications, reports, and announcements</p>
          </div>
          <div class="channel-card">
            <h3>💬 Instant Messaging</h3>
            <p>Quick questions and daily coordination</p>
          </div>
          <div class="channel-card">
            <h3>📹 Video Conferencing</h3>
            <p>Meetings, presentations, and workshops</p>
          </div>
          <div class="channel-card">
            <h3>📊 Project Portal</h3>
            <p>Document repository and dashboards</p>
          </div>
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateMeetingCadence(): string {
    const meetings = this.data.meetings || []
    
    let content = `
      <section class="document-section" id="meeting-cadence">
        <h2>6. Meeting Cadence</h2>
    `

    if (meetings.length > 0) {
      content += `
        <table class="meeting-table">
          <thead>
            <tr>
              <th>Meeting</th>
              <th>Frequency</th>
              <th>Duration</th>
              <th>Attendees</th>
              <th>Purpose</th>
            </tr>
          </thead>
          <tbody>
            ${meetings.map(m => `
              <tr>
                <td><strong>${m.name || m}</strong></td>
                <td>${m.frequency || 'Weekly'}</td>
                <td>${m.duration || '1 hour'}</td>
                <td>${m.attendees || 'Project Team'}</td>
                <td>${m.purpose || 'Status update'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `
    } else {
      content += `
        <table class="meeting-table">
          <thead>
            <tr>
              <th>Meeting</th>
              <th>Frequency</th>
              <th>Duration</th>
              <th>Key Topics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Daily Stand-up</td>
              <td>Daily</td>
              <td>15 min</td>
              <td>Progress, blockers, plans</td>
            </tr>
            <tr>
              <td>Sprint Planning</td>
              <td>Bi-weekly</td>
              <td>2 hours</td>
              <td>Sprint goals, task allocation</td>
            </tr>
            <tr>
              <td>Steering Committee</td>
              <td>Monthly</td>
              <td>1 hour</td>
              <td>Strategic decisions, approvals</td>
            </tr>
            <tr>
              <td>Retrospective</td>
              <td>Bi-weekly</td>
              <td>1 hour</td>
              <td>Lessons learned, improvements</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateReportingStructure(): string {
    const reports = this.data.reports || []
    
    let content = `
      <section class="document-section" id="reporting-structure">
        <h2>7. Reporting Structure</h2>
    `

    if (reports.length > 0) {
      content += `
        <div class="reports-grid">
          ${reports.map(report => `
            <div class="report-card">
              <h3>${report.name || report}</h3>
              ${report.frequency ? `<p><strong>Frequency:</strong> ${report.frequency}</p>` : ''}
              ${report.audience ? `<p><strong>Audience:</strong> ${report.audience}</p>` : ''}
              ${report.content ? `<p><strong>Content:</strong> ${report.content}</p>` : ''}
            </div>
          `).join('')}
        </div>
      `
    } else {
      content += `
        <h3>7.1 Standard Reports</h3>
        <ul>
          <li><strong>Weekly Status Report:</strong> Progress, issues, upcoming activities</li>
          <li><strong>Monthly Dashboard:</strong> KPIs, budget, timeline, risks</li>
          <li><strong>Milestone Report:</strong> Deliverable completion and sign-off</li>
          <li><strong>Risk Register:</strong> Current risks and mitigation status</li>
        </ul>
        
        <h3>7.2 Report Distribution</h3>
        <p>All reports will be distributed via email and posted to the project portal for reference.</p>
      `
    }

    content += `</section>`
    return content
  }

  private generateEscalationPath(): string {
    return `
      <section class="document-section" id="escalation-path">
        <h2>8. Escalation Path</h2>
        
        ${this.data.escalationPath ? this.formatContent(this.data.escalationPath) : `
          <div class="escalation-diagram">
            ${this.options.includeCharts ? this.createMermaidChart('graph', `
graph TB
    A[Team Member] -->|Issue Identified| B[Team Lead]
    B -->|Cannot Resolve| C[Project Manager]
    C -->|Strategic Impact| D[Steering Committee]
    D -->|Critical Decision| E[Executive Sponsor]
    
    B -->|Technical Issue| F[Technical Lead]
    F -->|Architecture Impact| C
            `) : ''}
          </div>
          
          <h3>8.1 Escalation Triggers</h3>
          <ul>
            <li>Budget variance > 10%</li>
            <li>Schedule slippage > 1 week</li>
            <li>Critical risks materialized</li>
            <li>Scope change requests</li>
            <li>Resource conflicts</li>
          </ul>
          
          <h3>8.2 Response Times</h3>
          <table class="response-table">
            <tr>
              <th>Severity</th>
              <th>Response Time</th>
              <th>Resolution Time</th>
            </tr>
            <tr>
              <td>Critical</td>
              <td>2 hours</td>
              <td>24 hours</td>
            </tr>
            <tr>
              <td>High</td>
              <td>4 hours</td>
              <td>48 hours</td>
            </tr>
            <tr>
              <td>Medium</td>
              <td>1 day</td>
              <td>1 week</td>
            </tr>
            <tr>
              <td>Low</td>
              <td>2 days</td>
              <td>2 weeks</td>
            </tr>
          </table>
        `}
      </section>
    `
  }

  private generateFeedbackMechanisms(): string {
    return `
      <section class="document-section" id="feedback-mechanisms">
        <h2>9. Feedback Mechanisms</h2>
        
        ${this.data.feedbackMechanisms ? this.formatContent(this.data.feedbackMechanisms) : `
          <h3>9.1 Feedback Channels</h3>
          <ul>
            <li><strong>Surveys:</strong> Quarterly stakeholder satisfaction surveys</li>
            <li><strong>Retrospectives:</strong> Sprint retrospectives for continuous improvement</li>
            <li><strong>Suggestion Box:</strong> Anonymous feedback portal</li>
            <li><strong>One-on-Ones:</strong> Regular individual meetings</li>
            <li><strong>Town Halls:</strong> Open forum for questions and concerns</li>
          </ul>
          
          <h3>9.2 Feedback Processing</h3>
          <ol>
            <li>Collection through designated channels</li>
            <li>Review and categorization</li>
            <li>Action planning</li>
            <li>Implementation of improvements</li>
            <li>Communication of changes</li>
          </ol>
        `}
      </section>
    `
  }

  private generateCommunicationRisks(): string {
    const risks = this.data.communicationRisks || []
    
    let content = `
      <section class="document-section" id="communication-risks">
        <h2>10. Communication Risks</h2>
    `

    if (risks.length > 0) {
      content += `
        <table class="risk-table">
          <thead>
            <tr>
              <th>Risk</th>
              <th>Impact</th>
              <th>Mitigation</th>
            </tr>
          </thead>
          <tbody>
            ${risks.map(r => `
              <tr>
                <td>${r.risk || r}</td>
                <td>${r.impact || 'Medium'}</td>
                <td>${r.mitigation || 'TBD'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `
    } else {
      content += `
        <table class="risk-table">
          <thead>
            <tr>
              <th>Risk</th>
              <th>Impact</th>
              <th>Mitigation</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Information overload</td>
              <td>High</td>
              <td>Prioritize and summarize communications</td>
            </tr>
            <tr>
              <td>Stakeholder disengagement</td>
              <td>High</td>
              <td>Regular engagement activities and feedback</td>
            </tr>
            <tr>
              <td>Message distortion</td>
              <td>Medium</td>
              <td>Use multiple channels and confirm understanding</td>
            </tr>
            <tr>
              <td>Technology failures</td>
              <td>Medium</td>
              <td>Backup communication channels</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateBestPractices(): string {
    return `
      <section class="document-section" id="best-practices">
        <h2>11. Best Practices</h2>
        
        <div class="best-practices-grid">
          <div class="practice-card">
            <h3>📝 Clear & Concise</h3>
            <p>Keep messages focused and to the point</p>
          </div>
          <div class="practice-card">
            <h3>⏰ Timely</h3>
            <p>Share information when it's most relevant</p>
          </div>
          <div class="practice-card">
            <h3>🎯 Targeted</h3>
            <p>Tailor content to audience needs</p>
          </div>
          <div class="practice-card">
            <h3>✅ Actionable</h3>
            <p>Include clear next steps and owners</p>
          </div>
          <div class="practice-card">
            <h3>🔄 Two-way</h3>
            <p>Encourage dialogue and feedback</p>
          </div>
          <div class="practice-card">
            <h3>📊 Visual</h3>
            <p>Use charts and diagrams when possible</p>
          </div>
        </div>
      </section>
    `
  }

  private generateAppendices(): string {
    return `
      <section class="document-section page-break-before" id="appendices">
        <h2>12. Appendices</h2>
        
        <h3>Appendix A: Contact List</h3>
        <p>Detailed contact information for all stakeholders and team members.</p>
        
        <h3>Appendix B: Templates</h3>
        <ul>
          <li>Status Report Template</li>
          <li>Meeting Agenda Template</li>
          <li>Risk Report Template</li>
          <li>Change Request Template</li>
        </ul>
        
        <h3>Document Control</h3>
        <table>
          <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Author</th>
            <th>Changes</th>
          </tr>
          <tr>
            <td>${this.metadata.version || '1.0'}</td>
            <td>${this.metadata.date}</td>
            <td>${this.metadata.author || 'User'}</td>
            <td>Initial document generation</td>
          </tr>
        </table>
      </section>
    `
  }

  private getInterestBadge(level: string): string {
    const levelClass = (level || 'medium').toLowerCase()
    return `<span class="badge badge-${levelClass}">${level || 'Medium'}</span>`
  }

  private getInfluenceBadge(level: string): string {
    const levelClass = (level || 'medium').toLowerCase()
    return `<span class="badge badge-${levelClass}">${level || 'Medium'}</span>`
  }

  private getChannelIcon(type: string): string {
    const icons: Record<string, string> = {
      email: '📧',
      meeting: '📹',
      chat: '💬',
      portal: '📊',
      phone: '📞',
      report: '📄'
    }
    return icons[type?.toLowerCase()] || '📢'
  }

  protected getDocumentSpecificStyles(): string {
    return `
      .stakeholder-table,
      .matrix-table,
      .meeting-table,
      .response-table,
      .risk-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
      }
      
      .stakeholder-table th,
      .matrix-table th,
      .meeting-table th,
      .response-table th,
      .risk-table th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.75rem;
        text-align: left;
      }
      
      .stakeholder-table td,
      .matrix-table td,
      .meeting-table td,
      .response-table td,
      .risk-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
      }
      
      .badge {
        padding: 3px 10px;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: 500;
        display: inline-block;
      }
      
      .badge-high {
        background: #ffebee;
        color: #c62828;
      }
      
      .badge-medium {
        background: #fff3e0;
        color: #f57c00;
      }
      
      .badge-low {
        background: #e8f5e9;
        color: #2e7d32;
      }
      
      .channels-grid,
      .reports-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }
      
      .channel-card,
      .report-card {
        background: #f9f9f9;
        border-radius: 8px;
        padding: 1.5rem;
        border-left: 4px solid #667eea;
      }
      
      .channel-card h3,
      .report-card h3 {
        margin-top: 0;
        color: #333;
      }
      
      .best-practices-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }
      
      .practice-card {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
      }
      
      .practice-card h3 {
        color: #667eea;
        margin-bottom: 0.5rem;
      }
      
      .escalation-diagram {
        margin: 2rem 0;
        padding: 1rem;
        background: #f5f5f5;
        border-radius: 8px;
      }
    `
  }
}

export interface CommunicationPlanMetadata extends DocumentMetadata {}