/**
 * Unified Technical Landscape Formatter
 * 
 * This formatter generates HTML output for Technical Landscape documents
 * that works consistently in both the document viewer and PDF generation.
 */

import { BaseUnifiedFormatter, DocumentMetadata } from './base-unified-formatter'

interface TechnicalLandscapeData {
  currentState?: any
  proposedArchitecture?: any
  technologyStack?: any
  integrationPoints?: any
  securityConsiderations?: any
  performanceRequirements?: any
  scalabilityPlan?: any
  dataArchitecture?: any
  infrastructureRequirements?: any
  monitoringStrategy?: any
  disasterRecovery?: any
  complianceRequirements?: any
  technicalRisks?: any
  migrationStrategy?: any
  [key: string]: any
}

export class UnifiedTechnicalLandscapeFormatter extends BaseUnifiedFormatter<TechnicalLandscapeData> {
  constructor(data: TechnicalLandscapeData, metadata: DocumentMetadata) {
    super(data, metadata)
  }
  
  protected ensureStructure(data: any): TechnicalLandscapeData {
    // Handle wrapped content
    if (data?.analysis) {
      return {
        ...data.analysis,
        ...data
      }
    }
    
    return {
      currentState: data?.currentState || {},
      proposedArchitecture: data?.proposedArchitecture || {},
      technologyStack: data?.technologyStack || {},
      integrationPoints: data?.integrationPoints || {},
      securityConsiderations: data?.securityConsiderations || {},
      performanceRequirements: data?.performanceRequirements || {},
      scalabilityPlan: data?.scalabilityPlan || {},
      dataArchitecture: data?.dataArchitecture || {},
      infrastructureRequirements: data?.infrastructureRequirements || {},
      monitoringStrategy: data?.monitoringStrategy || {},
      disasterRecovery: data?.disasterRecovery || {},
      complianceRequirements: data?.complianceRequirements || {},
      technicalRisks: data?.technicalRisks || {},
      migrationStrategy: data?.migrationStrategy || {},
      ...data
    }
  }

  generateHTML(): string {
    const sections: string[] = []
    
    // Add cover page
    sections.push(this.generateCoverPage())
    
    // Add table of contents
    sections.push(this.generateTableOfContents())
    
    // Add executive summary
    sections.push(this.generateExecutiveSummary())
    
    // Add main content sections
    sections.push(this.generateCurrentStateAnalysis())
    sections.push(this.generateProposedArchitecture())
    sections.push(this.generateTechnologyStack())
    sections.push(this.generateIntegrationArchitecture())
    sections.push(this.generateDataArchitecture())
    sections.push(this.generateSecurityArchitecture())
    sections.push(this.generatePerformanceAndScalability())
    sections.push(this.generateInfrastructureRequirements())
    sections.push(this.generateMonitoringAndObservability())
    sections.push(this.generateDisasterRecovery())
    sections.push(this.generateComplianceAndGovernance())
    sections.push(this.generateTechnicalRisks())
    sections.push(this.generateMigrationStrategy())
    sections.push(this.generateRecommendations())
    sections.push(this.generateAppendices())
    
    // Return simple div-wrapped HTML like PID does
    return `
      <div class="technical-landscape-document">
        ${sections.join('\n')}
      </div>
    `
  }

  private generateCoverPage(): string {
    return `
      <div class="cover-page">
        <div class="cover-logo">
          <svg width="200" height="60" viewBox="0 0 200 60" preserveAspectRatio="xMidYMid meet">
            <text x="100" y="35" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#667eea" text-anchor="middle">
              Project Genie ðŸ§ž
            </text>
          </svg>
        </div>
        
        <h1 class="cover-title">Technical Landscape Analysis</h1>
        <h2 class="cover-subtitle">${this.metadata.projectName}</h2>
        
        <div class="cover-metadata">
          <p class="cover-metadata-item"><strong>Company:</strong> ${this.metadata.companyName}</p>
          <p class="cover-metadata-item"><strong>Date:</strong> ${this.metadata.date}</p>
          <p class="cover-metadata-item"><strong>Version:</strong> ${this.metadata.version}</p>
          ${this.metadata.author ? `<p class="cover-metadata-item"><strong>Generated by:</strong> ${this.metadata.author}</p>` : ''}
        </div>
      </div>
    `
  }

  protected generateTableOfContents(): string {
    return `
      <section class="table-of-contents">
        <h2>ðŸ“‘ Table of Contents</h2>
        <ol>
          <li><a href="#executive-summary">Executive Summary</a></li>
          <li><a href="#current-state">Current State Analysis</a></li>
          <li><a href="#proposed-architecture">Proposed Architecture</a></li>
          <li><a href="#technology-stack">Technology Stack</a></li>
          <li><a href="#integration-architecture">Integration Architecture</a></li>
          <li><a href="#data-architecture">Data Architecture</a></li>
          <li><a href="#security-architecture">Security Architecture</a></li>
          <li><a href="#performance-scalability">Performance & Scalability</a></li>
          <li><a href="#infrastructure">Infrastructure Requirements</a></li>
          <li><a href="#monitoring">Monitoring & Observability</a></li>
          <li><a href="#disaster-recovery">Disaster Recovery</a></li>
          <li><a href="#compliance">Compliance & Governance</a></li>
          <li><a href="#technical-risks">Technical Risks</a></li>
          <li><a href="#migration-strategy">Migration Strategy</a></li>
          <li><a href="#recommendations">Recommendations</a></li>
          <li><a href="#appendices">Appendices</a></li>
        </ol>
      </section>
    `
  }

  private generateExecutiveSummary(): string {
    return `
      <section class="document-section" id="executive-summary">
        <h2>1. Executive Summary</h2>
        
        <p>This Technical Landscape Analysis provides a comprehensive overview of the current and proposed technical architecture for the ${this.metadata.projectName} project. The document outlines the technology stack, integration points, data architecture, and infrastructure requirements necessary to deliver a robust, scalable, and secure solution.</p>
        
        <div class="key-highlights">
          <h3>ðŸŽ¯ Key Highlights</h3>
          <ul>
            <li>Comprehensive analysis of current technical landscape</li>
            <li>Detailed proposed architecture with modern technology stack</li>
            <li>Integration strategy for seamless connectivity</li>
            <li>Security-first approach with built-in compliance</li>
            <li>Scalable infrastructure design for future growth</li>
          </ul>
        </div>
        
        ${this.data.executiveSummary ? this.formatContent(this.data.executiveSummary) : ''}
      </section>
    `
  }

  private generateCurrentStateAnalysis(): string {
    let content = `
      <section class="document-section" id="current-state">
        <h2>2. Current State Analysis</h2>
    `

    if (this.data.currentState) {
      content += this.formatContent(this.data.currentState)
    } else {
      content += `
        <p>The current technical landscape represents the existing systems, technologies, and infrastructure that will be impacted or replaced by this project.</p>
        
        <h3>2.1 Existing Systems</h3>
        <ul>
          <li>Legacy applications and their dependencies</li>
          <li>Current data storage solutions</li>
          <li>Existing integration patterns</li>
          <li>Current security measures</li>
        </ul>
        
        <h3>2.2 Technical Debt</h3>
        <ul>
          <li>Outdated technologies requiring modernization</li>
          <li>Performance bottlenecks</li>
          <li>Scalability limitations</li>
          <li>Security vulnerabilities</li>
        </ul>
        
        <h3>2.3 Constraints</h3>
        <ul>
          <li>Regulatory requirements</li>
          <li>Budget limitations</li>
          <li>Timeline constraints</li>
          <li>Resource availability</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateProposedArchitecture(): string {
    let content = `
      <section class="document-section" id="proposed-architecture">
        <h2>3. Proposed Architecture</h2>
    `

    if (this.data.proposedArchitecture) {
      content += this.formatContent(this.data.proposedArchitecture)
    } else {
      content += `
        <p>The proposed architecture leverages modern, cloud-native technologies to deliver a scalable, maintainable, and secure solution.</p>
        
        <h3>3.1 Architecture Principles</h3>
        <ul>
          <li><strong>Microservices:</strong> Loosely coupled, independently deployable services</li>
          <li><strong>API-First:</strong> Well-defined interfaces for all components</li>
          <li><strong>Cloud-Native:</strong> Designed for cloud deployment and scaling</li>
          <li><strong>Security by Design:</strong> Built-in security at every layer</li>
          <li><strong>DevOps Enabled:</strong> Automated CI/CD pipelines</li>
        </ul>
        
        <h3>3.2 High-Level Architecture</h3>
        <p>The solution follows a layered architecture approach:</p>
        <ul>
          <li><strong>Presentation Layer:</strong> Web and mobile interfaces</li>
          <li><strong>API Gateway:</strong> Centralized API management</li>
          <li><strong>Service Layer:</strong> Business logic and processing</li>
          <li><strong>Data Layer:</strong> Persistent storage and caching</li>
          <li><strong>Infrastructure Layer:</strong> Cloud services and networking</li>
        </ul>
      `
    }

    if (this.options.includeCharts) {
      content += this.createMermaidChart('graph', `
graph TB
    subgraph "Presentation Layer"
        WEB[Web Application]
        MOB[Mobile Apps]
    end
    
    subgraph "API Layer"
        GW[API Gateway]
        AUTH[Authentication]
    end
    
    subgraph "Service Layer"
        MS1[Microservice 1]
        MS2[Microservice 2]
        MS3[Microservice 3]
    end
    
    subgraph "Data Layer"
        DB[(Database)]
        CACHE[(Cache)]
        QUEUE[Message Queue]
    end
    
    WEB --> GW
    MOB --> GW
    GW --> AUTH
    GW --> MS1
    GW --> MS2
    GW --> MS3
    MS1 --> DB
    MS2 --> CACHE
    MS3 --> QUEUE
      `)
    }

    content += `</section>`
    return content
  }

  private generateTechnologyStack(): string {
    let content = `
      <section class="document-section" id="technology-stack">
        <h2>4. Technology Stack</h2>
    `

    if (this.data.technologyStack) {
      content += this.formatContent(this.data.technologyStack)
    } else {
      content += `
        <table class="tech-stack-table">
          <thead>
            <tr>
              <th>Layer</th>
              <th>Technology</th>
              <th>Purpose</th>
              <th>Justification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><strong>Frontend</strong></td>
              <td>React/Next.js</td>
              <td>Web application framework</td>
              <td>Modern, performant, excellent ecosystem</td>
            </tr>
            <tr>
              <td><strong>Mobile</strong></td>
              <td>React Native</td>
              <td>Cross-platform mobile development</td>
              <td>Code reuse, consistent experience</td>
            </tr>
            <tr>
              <td><strong>Backend</strong></td>
              <td>Node.js/Python</td>
              <td>API and service development</td>
              <td>High performance, scalability</td>
            </tr>
            <tr>
              <td><strong>Database</strong></td>
              <td>PostgreSQL</td>
              <td>Primary data storage</td>
              <td>ACID compliance, reliability</td>
            </tr>
            <tr>
              <td><strong>Cache</strong></td>
              <td>Redis</td>
              <td>Caching and sessions</td>
              <td>High performance, versatility</td>
            </tr>
            <tr>
              <td><strong>Message Queue</strong></td>
              <td>RabbitMQ/Kafka</td>
              <td>Asynchronous processing</td>
              <td>Reliability, scalability</td>
            </tr>
            <tr>
              <td><strong>Cloud Platform</strong></td>
              <td>AWS/Azure/GCP</td>
              <td>Infrastructure and services</td>
              <td>Comprehensive services, reliability</td>
            </tr>
            <tr>
              <td><strong>Container</strong></td>
              <td>Docker/Kubernetes</td>
              <td>Container orchestration</td>
              <td>Portability, scalability</td>
            </tr>
            <tr>
              <td><strong>CI/CD</strong></td>
              <td>GitHub Actions/Jenkins</td>
              <td>Automation pipeline</td>
              <td>Integration, automation</td>
            </tr>
            <tr>
              <td><strong>Monitoring</strong></td>
              <td>Prometheus/Grafana</td>
              <td>System monitoring</td>
              <td>Comprehensive metrics, alerting</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateIntegrationArchitecture(): string {
    let content = `
      <section class="document-section" id="integration-architecture">
        <h2>5. Integration Architecture</h2>
    `

    if (this.data.integrationPoints) {
      content += this.formatContent(this.data.integrationPoints)
    } else {
      content += `
        <h3>5.1 Integration Patterns</h3>
        <ul>
          <li><strong>RESTful APIs:</strong> Synchronous communication between services</li>
          <li><strong>Message Queues:</strong> Asynchronous event-driven communication</li>
          <li><strong>Webhooks:</strong> Real-time notifications to external systems</li>
          <li><strong>Batch Processing:</strong> Scheduled data synchronization</li>
        </ul>
        
        <h3>5.2 External Integrations</h3>
        <table class="integration-table">
          <thead>
            <tr>
              <th>System</th>
              <th>Integration Method</th>
              <th>Data Flow</th>
              <th>Frequency</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Payment Gateway</td>
              <td>REST API</td>
              <td>Bidirectional</td>
              <td>Real-time</td>
            </tr>
            <tr>
              <td>CRM System</td>
              <td>Webhook/API</td>
              <td>Bidirectional</td>
              <td>Real-time</td>
            </tr>
            <tr>
              <td>Analytics Platform</td>
              <td>Streaming</td>
              <td>Outbound</td>
              <td>Real-time</td>
            </tr>
            <tr>
              <td>Email Service</td>
              <td>SMTP/API</td>
              <td>Outbound</td>
              <td>On-demand</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateDataArchitecture(): string {
    let content = `
      <section class="document-section" id="data-architecture">
        <h2>6. Data Architecture</h2>
    `

    if (this.data.dataArchitecture) {
      content += this.formatContent(this.data.dataArchitecture)
    } else {
      content += `
        <h3>6.1 Data Model</h3>
        <p>The data architecture follows domain-driven design principles with clear boundaries between different business domains.</p>
        
        <h3>6.2 Data Storage Strategy</h3>
        <ul>
          <li><strong>Transactional Data:</strong> PostgreSQL for ACID compliance</li>
          <li><strong>Document Storage:</strong> MongoDB for flexible schemas</li>
          <li><strong>Time-Series Data:</strong> InfluxDB for metrics and logs</li>
          <li><strong>File Storage:</strong> S3-compatible object storage</li>
          <li><strong>Search Index:</strong> Elasticsearch for full-text search</li>
        </ul>
        
        <h3>6.3 Data Governance</h3>
        <ul>
          <li><strong>Data Classification:</strong> Public, Internal, Confidential, Restricted</li>
          <li><strong>Data Retention:</strong> Policies based on regulatory requirements</li>
          <li><strong>Data Privacy:</strong> GDPR/CCPA compliance measures</li>
          <li><strong>Data Quality:</strong> Validation and cleansing processes</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateSecurityArchitecture(): string {
    let content = `
      <section class="document-section" id="security-architecture">
        <h2>7. Security Architecture</h2>
    `

    if (this.data.securityConsiderations) {
      content += this.formatContent(this.data.securityConsiderations)
    } else {
      content += `
        <h3>7.1 Security Layers</h3>
        <ul>
          <li><strong>Network Security:</strong> Firewalls, VPNs, network segmentation</li>
          <li><strong>Application Security:</strong> OWASP compliance, secure coding practices</li>
          <li><strong>Data Security:</strong> Encryption at rest and in transit</li>
          <li><strong>Identity Management:</strong> SSO, MFA, role-based access control</li>
        </ul>
        
        <h3>7.2 Security Controls</h3>
        <table class="security-table">
          <thead>
            <tr>
              <th>Control Type</th>
              <th>Implementation</th>
              <th>Coverage</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Authentication</td>
              <td>OAuth 2.0/OIDC</td>
              <td>All user access</td>
            </tr>
            <tr>
              <td>Authorization</td>
              <td>RBAC/ABAC</td>
              <td>Resource access</td>
            </tr>
            <tr>
              <td>Encryption</td>
              <td>TLS 1.3, AES-256</td>
              <td>All data</td>
            </tr>
            <tr>
              <td>Audit Logging</td>
              <td>Centralized SIEM</td>
              <td>All transactions</td>
            </tr>
            <tr>
              <td>Vulnerability Scanning</td>
              <td>Automated tools</td>
              <td>Continuous</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generatePerformanceAndScalability(): string {
    let content = `
      <section class="document-section" id="performance-scalability">
        <h2>8. Performance & Scalability</h2>
    `

    if (this.data.performanceRequirements || this.data.scalabilityPlan) {
      if (this.data.performanceRequirements) {
        content += `
          <h3>8.1 Performance Requirements</h3>
          ${this.formatContent(this.data.performanceRequirements)}
        `
      }
      if (this.data.scalabilityPlan) {
        content += `
          <h3>8.2 Scalability Plan</h3>
          ${this.formatContent(this.data.scalabilityPlan)}
        `
      }
    } else {
      content += `
        <h3>8.1 Performance Targets</h3>
        <table class="performance-table">
          <thead>
            <tr>
              <th>Metric</th>
              <th>Target</th>
              <th>Measurement Method</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Page Load Time</td>
              <td>&lt; 2 seconds</td>
              <td>Synthetic monitoring</td>
            </tr>
            <tr>
              <td>API Response Time</td>
              <td>&lt; 200ms (p95)</td>
              <td>APM tools</td>
            </tr>
            <tr>
              <td>Concurrent Users</td>
              <td>10,000+</td>
              <td>Load testing</td>
            </tr>
            <tr>
              <td>Availability</td>
              <td>99.9%</td>
              <td>Uptime monitoring</td>
            </tr>
            <tr>
              <td>Error Rate</td>
              <td>&lt; 0.1%</td>
              <td>Error tracking</td>
            </tr>
          </tbody>
        </table>
        
        <h3>8.2 Scalability Strategy</h3>
        <ul>
          <li><strong>Horizontal Scaling:</strong> Auto-scaling based on load</li>
          <li><strong>Database Scaling:</strong> Read replicas and sharding</li>
          <li><strong>Caching Strategy:</strong> Multi-layer caching</li>
          <li><strong>CDN:</strong> Global content delivery</li>
          <li><strong>Load Balancing:</strong> Geographic distribution</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateInfrastructureRequirements(): string {
    let content = `
      <section class="document-section" id="infrastructure">
        <h2>9. Infrastructure Requirements</h2>
    `

    if (this.data.infrastructureRequirements) {
      content += this.formatContent(this.data.infrastructureRequirements)
    } else {
      content += `
        <h3>9.1 Compute Resources</h3>
        <table class="infrastructure-table">
          <thead>
            <tr>
              <th>Environment</th>
              <th>Resources</th>
              <th>Configuration</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Development</td>
              <td>2 instances</td>
              <td>2 vCPU, 4GB RAM</td>
            </tr>
            <tr>
              <td>Staging</td>
              <td>4 instances</td>
              <td>4 vCPU, 8GB RAM</td>
            </tr>
            <tr>
              <td>Production</td>
              <td>8+ instances</td>
              <td>8 vCPU, 16GB RAM</td>
            </tr>
          </tbody>
        </table>
        
        <h3>9.2 Network Requirements</h3>
        <ul>
          <li>Load balancers with SSL termination</li>
          <li>VPC with public and private subnets</li>
          <li>NAT gateways for outbound traffic</li>
          <li>VPN for secure administrative access</li>
        </ul>
        
        <h3>9.3 Storage Requirements</h3>
        <ul>
          <li>Database storage: 500GB initial, expandable</li>
          <li>Object storage: 1TB for files and backups</li>
          <li>Log storage: 100GB with rotation</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateMonitoringAndObservability(): string {
    let content = `
      <section class="document-section" id="monitoring">
        <h2>10. Monitoring & Observability</h2>
    `

    if (this.data.monitoringStrategy) {
      content += this.formatContent(this.data.monitoringStrategy)
    } else {
      content += `
        <h3>10.1 Monitoring Stack</h3>
        <ul>
          <li><strong>Metrics:</strong> Prometheus for time-series metrics</li>
          <li><strong>Logs:</strong> ELK stack for centralized logging</li>
          <li><strong>Traces:</strong> Jaeger for distributed tracing</li>
          <li><strong>Dashboards:</strong> Grafana for visualization</li>
          <li><strong>Alerts:</strong> PagerDuty for incident management</li>
        </ul>
        
        <h3>10.2 Key Metrics</h3>
        <ul>
          <li>System metrics (CPU, memory, disk, network)</li>
          <li>Application metrics (requests, errors, latency)</li>
          <li>Business metrics (transactions, conversions)</li>
          <li>Security metrics (failed logins, anomalies)</li>
        </ul>
        
        <h3>10.3 Alerting Strategy</h3>
        <table class="alert-table">
          <thead>
            <tr>
              <th>Severity</th>
              <th>Response Time</th>
              <th>Examples</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Critical</td>
              <td>Immediate</td>
              <td>Service down, data breach</td>
            </tr>
            <tr>
              <td>High</td>
              <td>15 minutes</td>
              <td>Performance degradation, high error rate</td>
            </tr>
            <tr>
              <td>Medium</td>
              <td>1 hour</td>
              <td>Capacity warnings, failed jobs</td>
            </tr>
            <tr>
              <td>Low</td>
              <td>Next business day</td>
              <td>Non-critical updates, maintenance</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateDisasterRecovery(): string {
    let content = `
      <section class="document-section" id="disaster-recovery">
        <h2>11. Disaster Recovery</h2>
    `

    if (this.data.disasterRecovery) {
      content += this.formatContent(this.data.disasterRecovery)
    } else {
      content += `
        <h3>11.1 Recovery Objectives</h3>
        <ul>
          <li><strong>RTO (Recovery Time Objective):</strong> 4 hours</li>
          <li><strong>RPO (Recovery Point Objective):</strong> 1 hour</li>
          <li><strong>MTTR (Mean Time To Recovery):</strong> 2 hours</li>
        </ul>
        
        <h3>11.2 Backup Strategy</h3>
        <ul>
          <li>Automated daily backups of all databases</li>
          <li>Continuous replication to secondary region</li>
          <li>Weekly full backups with incremental daily backups</li>
          <li>90-day retention for compliance</li>
        </ul>
        
        <h3>11.3 Disaster Recovery Plan</h3>
        <ol>
          <li>Incident detection and assessment</li>
          <li>Activation of DR team</li>
          <li>Failover to secondary site</li>
          <li>Data restoration from backups</li>
          <li>Service validation</li>
          <li>Communication to stakeholders</li>
          <li>Post-incident review</li>
        </ol>
      `
    }

    content += `</section>`
    return content
  }

  private generateComplianceAndGovernance(): string {
    let content = `
      <section class="document-section" id="compliance">
        <h2>12. Compliance & Governance</h2>
    `

    if (this.data.complianceRequirements) {
      content += this.formatContent(this.data.complianceRequirements)
    } else {
      content += `
        <h3>12.1 Regulatory Compliance</h3>
        <ul>
          <li><strong>GDPR:</strong> Data protection and privacy</li>
          <li><strong>SOC 2:</strong> Security and availability</li>
          <li><strong>PCI DSS:</strong> Payment card data security</li>
          <li><strong>HIPAA:</strong> Healthcare data protection (if applicable)</li>
        </ul>
        
        <h3>12.2 Technical Governance</h3>
        <ul>
          <li>Architecture review board approval</li>
          <li>Security assessment and penetration testing</li>
          <li>Code review and quality gates</li>
          <li>Change management procedures</li>
          <li>Documentation standards</li>
        </ul>
        
        <h3>12.3 Audit Requirements</h3>
        <ul>
          <li>Comprehensive audit logging</li>
          <li>Regular compliance assessments</li>
          <li>Third-party security audits</li>
          <li>Automated compliance reporting</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateTechnicalRisks(): string {
    let content = `
      <section class="document-section" id="technical-risks">
        <h2>13. Technical Risks</h2>
    `

    if (this.data.technicalRisks) {
      content += this.formatContent(this.data.technicalRisks)
    } else {
      content += `
        <table class="risk-table">
          <thead>
            <tr>
              <th>Risk</th>
              <th>Impact</th>
              <th>Probability</th>
              <th>Mitigation</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Technology obsolescence</td>
              <td>High</td>
              <td>Medium</td>
              <td>Regular technology review and updates</td>
            </tr>
            <tr>
              <td>Vendor lock-in</td>
              <td>Medium</td>
              <td>Medium</td>
              <td>Use of open standards and abstractions</td>
            </tr>
            <tr>
              <td>Scalability issues</td>
              <td>High</td>
              <td>Low</td>
              <td>Load testing and capacity planning</td>
            </tr>
            <tr>
              <td>Integration failures</td>
              <td>Medium</td>
              <td>Medium</td>
              <td>Comprehensive testing and fallback mechanisms</td>
            </tr>
            <tr>
              <td>Security vulnerabilities</td>
              <td>High</td>
              <td>Medium</td>
              <td>Regular security assessments and updates</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateMigrationStrategy(): string {
    let content = `
      <section class="document-section" id="migration-strategy">
        <h2>14. Migration Strategy</h2>
    `

    if (this.data.migrationStrategy) {
      content += this.formatContent(this.data.migrationStrategy)
    } else {
      content += `
        <h3>14.1 Migration Approach</h3>
        <p>The migration will follow a phased approach to minimize risk and ensure business continuity:</p>
        
        <ol>
          <li><strong>Phase 1 - Foundation:</strong> Infrastructure setup and core services</li>
          <li><strong>Phase 2 - Data Migration:</strong> Data migration with validation</li>
          <li><strong>Phase 3 - Application Migration:</strong> Service-by-service migration</li>
          <li><strong>Phase 4 - Cutover:</strong> Final transition and decommissioning</li>
        </ol>
        
        <h3>14.2 Migration Timeline</h3>
        ${this.options.includeCharts ? (() => {
          // Calculate dates based on project timeline
          const startDate = this.metadata.startDate ? new Date(this.metadata.startDate) : new Date()
          const startDateStr = startDate.toISOString().split('T')[0]
          
          return this.createMermaidChart('gantt', `
gantt
    title Migration Timeline
    dateFormat YYYY-MM-DD
    section Phase 1
    Infrastructure Setup :a1, ${startDateStr}, 30d
    Core Services :a2, after a1, 20d
    section Phase 2
    Data Migration Planning :b1, after a2, 15d
    Data Migration Execution :b2, after b1, 30d
    section Phase 3
    Service Migration :c1, after b2, 45d
    Testing & Validation :c2, after c1, 15d
    section Phase 4
    Cutover Planning :d1, after c2, 10d
    Go-Live :milestone, after d1, 0d
        `)
        })() : ''}
        
        <h3>14.3 Rollback Plan</h3>
        <ul>
          <li>Maintain parallel systems during transition</li>
          <li>Point-in-time recovery capabilities</li>
          <li>Automated rollback procedures</li>
          <li>Communication plan for stakeholders</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateRecommendations(): string {
    return `
      <section class="document-section" id="recommendations">
        <h2>15. Recommendations</h2>
        
        <h3>15.1 Immediate Actions</h3>
        <ul>
          <li>Finalize technology stack selection</li>
          <li>Establish development and deployment pipelines</li>
          <li>Set up monitoring and alerting infrastructure</li>
          <li>Conduct security assessment</li>
        </ul>
        
        <h3>15.2 Short-term (3 months)</h3>
        <ul>
          <li>Complete proof of concept for key components</li>
          <li>Establish integration patterns and standards</li>
          <li>Implement core security controls</li>
          <li>Begin team training on new technologies</li>
        </ul>
        
        <h3>15.3 Long-term (6-12 months)</h3>
        <ul>
          <li>Full implementation of proposed architecture</li>
          <li>Migration from legacy systems</li>
          <li>Performance optimization</li>
          <li>Continuous improvement processes</li>
        </ul>
      </section>
    `
  }

  private generateAppendices(): string {
    return `
      <section class="document-section page-break-before" id="appendices">
        <h2>16. Appendices</h2>
        
        <h3>Appendix A: Glossary</h3>
        <ul>
          <li><strong>API:</strong> Application Programming Interface</li>
          <li><strong>CI/CD:</strong> Continuous Integration/Continuous Deployment</li>
          <li><strong>DR:</strong> Disaster Recovery</li>
          <li><strong>K8s:</strong> Kubernetes</li>
          <li><strong>RBAC:</strong> Role-Based Access Control</li>
          <li><strong>RTO:</strong> Recovery Time Objective</li>
          <li><strong>RPO:</strong> Recovery Point Objective</li>
          <li><strong>SLA:</strong> Service Level Agreement</li>
        </ul>
        
        <h3>Appendix B: References</h3>
        <ul>
          <li>Architecture Standards and Guidelines</li>
          <li>Security Best Practices</li>
          <li>Vendor Documentation</li>
          <li>Industry Standards and Compliance Requirements</li>
        </ul>
        
        <h3>Appendix C: Document Control</h3>
        <table>
          <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Author</th>
            <th>Changes</th>
          </tr>
          <tr>
            <td>${this.metadata.version || '1.0'}</td>
            <td>${this.metadata.date}</td>
            <td>${this.metadata.author || 'User'}</td>
            <td>Initial document generation</td>
          </tr>
        </table>
      </section>
    `
  }

  protected getDocumentSpecificStyles(): string {
    return `
      .tech-stack-table,
      .integration-table,
      .security-table,
      .performance-table,
      .infrastructure-table,
      .alert-table,
      .risk-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
      }
      
      .tech-stack-table th,
      .integration-table th,
      .security-table th,
      .performance-table th,
      .infrastructure-table th,
      .alert-table th,
      .risk-table th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
      }
      
      .tech-stack-table td,
      .integration-table td,
      .security-table td,
      .performance-table td,
      .infrastructure-table td,
      .alert-table td,
      .risk-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
      }
      
      .tech-stack-table tbody tr:nth-child(even),
      .integration-table tbody tr:nth-child(even),
      .security-table tbody tr:nth-child(even),
      .performance-table tbody tr:nth-child(even),
      .infrastructure-table tbody tr:nth-child(even),
      .alert-table tbody tr:nth-child(even),
      .risk-table tbody tr:nth-child(even) {
        background: #f9f9f9;
      }
      
      .key-highlights {
        background: #f0f8ff;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1.5rem 0;
        border-left: 4px solid #2196F3;
      }
      
      .document-section h3 {
        color: #333;
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-size: 1.3rem;
      }
      
      .document-section h4 {
        color: #555;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
        font-size: 1.1rem;
      }
    `
  }
}

export interface TechnicalLandscapeMetadata extends DocumentMetadata {}