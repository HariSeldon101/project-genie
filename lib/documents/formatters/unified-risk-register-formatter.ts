/**
 * Unified Risk Register Formatter
 * 
 * This formatter generates HTML output for Risk Register documents
 * that works consistently in both the document viewer and PDF generation.
 */

import { BaseUnifiedFormatter, DocumentMetadata } from './base-unified-formatter'

interface Risk {
  id?: string
  category?: string
  risk?: string
  description?: string
  title?: string
  probability?: string
  impact?: string
  score?: number | string
  owner?: string
  mitigation?: string
  response?: string
  contingency?: string
  status?: string
  dateIdentified?: string
  lastReviewed?: string
  residualProbability?: string
  residualImpact?: string
  residualScore?: number | string
}

interface RiskRegisterData {
  projectName?: string
  projectManager?: string
  lastUpdated?: string
  approvalStatus?: string
  version?: string
  risks?: Risk[]
  riskAppetite?: string
  escalationThresholds?: {
    high?: number
    medium?: number
    low?: number
  }
  companyName?: string
  companyWebsite?: string
  documentOwner?: string
  executiveSummary?: string
  riskManagementApproach?: string
  riskMatrix?: any
  riskDistribution?: any
  mitigationStrategies?: any
  approvalSignoff?: any
  rawText?: string
  [key: string]: any
}

export class UnifiedRiskRegisterFormatter extends BaseUnifiedFormatter<RiskRegisterData> {
  constructor(data: RiskRegisterData, metadata: DocumentMetadata) {
    super(data, metadata)
  }
  
  protected ensureStructure(data: any): RiskRegisterData {
    return {
      risks: data?.risks || [],
      projectName: data?.projectName || this.metadata?.projectName || 'Project',
      projectManager: data?.projectManager || '',
      lastUpdated: data?.lastUpdated || new Date().toISOString(),
      approvalStatus: data?.approvalStatus || 'Draft',
      version: data?.version || '1.0',
      riskAppetite: data?.riskAppetite || '',
      escalationThresholds: data?.escalationThresholds || {},
      executiveSummary: data?.executiveSummary || data?._aiInsights?.summary || '',
      riskManagementApproach: data?.riskManagementApproach || '',
      ...data
    }
  }

  generateHTML(): string {
    const sections: string[] = []
    
    // Add cover page
    sections.push(this.generateCoverPage())
    
    // Add table of contents
    sections.push(this.generateTableOfContents())
    
    // Add main content sections
    sections.push(this.generateExecutiveSummary())
    sections.push(this.generateRiskManagementApproach())
    sections.push(this.generateRiskMatrix())
    sections.push(this.generateRiskRegister())
    sections.push(this.generateRiskDistribution())
    sections.push(this.generateMitigationStrategies())
    sections.push(this.generateApprovalSection())
    
    // Return simple div-wrapped HTML like PID does
    return `
      <div class="risk-register-document">
        ${sections.join('\n')}
      </div>
    `
  }

  private generateCoverPage(): string {
    return `
      <div class="cover-page">
        <div class="cover-logo">
          <svg width="200" height="60" viewBox="0 0 200 60" preserveAspectRatio="xMidYMid meet">
            <text x="100" y="35" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#667eea" text-anchor="middle">
              Project Genie üßû
            </text>
          </svg>
        </div>
        
        <h1 class="cover-title">Risk Register</h1>
        <h2 class="cover-subtitle">${this.metadata.projectName}</h2>
        
        <div class="cover-metadata">
          <p class="cover-metadata-item"><strong>Company:</strong> ${this.metadata.companyName}</p>
          <p class="cover-metadata-item"><strong>Date:</strong> ${this.metadata.date}</p>
          <p class="cover-metadata-item"><strong>Version:</strong> ${this.metadata.version}</p>
          ${this.metadata.author ? `<p class="cover-metadata-item"><strong>Generated by:</strong> ${this.metadata.author}</p>` : ''}
        </div>
      </div>
    `
  }

  protected generateTableOfContents(): string {
    return `
      <section class="table-of-contents">
        <h2>üìë Table of Contents</h2>
        <ol>
          <li><a href="#executive-summary">Executive Summary</a></li>
          <li><a href="#risk-management-approach">Risk Management Approach</a></li>
          <li><a href="#risk-matrix">Risk Matrix</a></li>
          <li><a href="#risk-register">Risk Register</a></li>
          <li><a href="#risk-distribution">Risk Distribution</a></li>
          <li><a href="#mitigation-strategies">Mitigation Strategies</a></li>
          <li><a href="#approval-sign-off">Approval & Sign-off</a></li>
        </ol>
      </section>
    `
  }

  private generateExecutiveSummary(): string {
    const risks = this.data.risks || []
    const openRisks = risks.filter(r => r.status !== 'Closed' && r.status !== 'Resolved')
    const highRisks = risks.filter(r => {
      const score = this.calculateRiskScore(r.probability || 'Medium', r.impact || 'Medium')
      return score >= 15
    })
    const closedRisks = risks.filter(r => r.status === 'Closed' || r.status === 'Resolved')

    let content = `
      <section class="document-section" id="executive-summary">
        <h2>1. Executive Summary</h2>
        
        <p>This Risk Register documents <strong>${risks.length} identified risks</strong> for the ${this.metadata.projectName} project, with <strong>${openRisks.length} currently open</strong> and requiring active management.</p>
        
        <div class="key-metrics">
          <h3>üéØ Key Metrics</h3>
          <ul>
            <li><strong>Total Risks Identified:</strong> ${risks.length}</li>
            <li><strong>Open Risks:</strong> ${openRisks.length}</li>
            <li><strong>High/Critical Risks:</strong> ${highRisks.length}</li>
            <li><strong>Risks Under Monitoring:</strong> ${risks.filter(r => r.status === 'Monitoring').length}</li>
            <li><strong>Closed Risks:</strong> ${closedRisks.length}</li>
          </ul>
        </div>
    `

    if (highRisks.length > 0) {
      content += `
        <div class="top-risks">
          <h3>‚ö†Ô∏è Top Risks Requiring Immediate Attention</h3>
          <ol>
      `
      
      highRisks.slice(0, 3).forEach((risk, index) => {
        const score = this.calculateRiskScore(risk.probability || 'Medium', risk.impact || 'Medium')
        content += `
          <li>
            <strong>${this.createVisualIndicator(score >= 20 ? 'error' : 'warning')} ${risk.risk || risk.description || risk.title}</strong>
            ${risk.mitigation || risk.response ? ` - ${risk.mitigation || risk.response}` : ''}
            (Score: ${score})
          </li>
        `
      })
      
      content += `
          </ol>
        </div>
      `
    }

    if (this.data.executiveSummary) {
      content += `
        <div class="additional-summary">
          ${this.formatContent(this.data.executiveSummary)}
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateRiskManagementApproach(): string {
    let content = `
      <section class="document-section" id="risk-management-approach">
        <h2>2. Risk Management Approach</h2>
    `

    if (this.data.riskAppetite) {
      content += `
        <h3>Risk Appetite</h3>
        <p>${this.formatContent(this.data.riskAppetite)}</p>
      `
    } else {
      content += `
        <h3>Risk Appetite</h3>
        <p>The organization maintains a balanced risk appetite, accepting calculated risks that align with strategic objectives while maintaining appropriate controls.</p>
      `
    }

    if (this.data.escalationThresholds) {
      content += `
        <h3>Escalation Thresholds</h3>
        <ul>
          <li><strong>High Risk Threshold:</strong> Score ‚â• ${this.data.escalationThresholds.high || 15}</li>
          <li><strong>Medium Risk Threshold:</strong> Score ‚â• ${this.data.escalationThresholds.medium || 10}</li>
          <li><strong>Low Risk Threshold:</strong> Score < ${this.data.escalationThresholds.low || 10}</li>
        </ul>
      `
    }

    if (this.data.riskManagementApproach) {
      content += this.formatContent(this.data.riskManagementApproach)
    }

    content += `</section>`
    return content
  }

  private generateRiskMatrix(): string {
    const risks = this.data.risks || []
    const probabilities = ['Very High', 'High', 'Medium', 'Low', 'Very Low']
    const impacts = ['Very Low', 'Low', 'Medium', 'High', 'Very High']
    
    let content = `
      <section class="document-section" id="risk-matrix">
        <h2>3. Risk Matrix</h2>
        
        <div class="risk-matrix-container">
          <table class="risk-matrix">
            <thead>
              <tr>
                <th class="matrix-label">Probability / Impact</th>
                ${impacts.map(impact => `<th>${impact}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
    `
    
    probabilities.forEach(probability => {
      content += `<tr>`
      content += `<th>${probability}</th>`
      
      impacts.forEach(impact => {
        const score = this.calculateRiskScore(probability, impact)
        const cellClass = this.getMatrixCellClass(score)
        const riskCount = risks.filter(r => 
          r.probability === probability && r.impact === impact
        ).length
        
        content += `
          <td class="${cellClass}">
            ${riskCount > 0 ? `<div class="risk-count">${riskCount}</div>` : ''}
          </td>
        `
      })
      
      content += `</tr>`
    })
    
    content += `
            </tbody>
          </table>
          
          <div class="matrix-legend">
            <div class="legend-item"><span class="legend-color low"></span> Low Risk (1-4)</div>
            <div class="legend-item"><span class="legend-color medium"></span> Medium Risk (5-9)</div>
            <div class="legend-item"><span class="legend-color high"></span> High Risk (10-15)</div>
            <div class="legend-item"><span class="legend-color critical"></span> Critical Risk (16-25)</div>
          </div>
        </div>
      </section>
    `
    
    return content
  }

  private generateRiskRegister(): string {
    const risks = this.data.risks || []
    
    if (risks.length === 0) {
      return `
        <section class="document-section" id="risk-register">
          <h2>4. Risk Register</h2>
          <p>No risks have been identified yet.</p>
        </section>
      `
    }

    const activeRisks = risks.filter(r => r.status !== 'Closed' && r.status !== 'Resolved')
    const closedRisks = risks.filter(r => r.status === 'Closed' || r.status === 'Resolved')

    let content = `
      <section class="document-section" id="risk-register">
        <h2>4. Risk Register</h2>
    `

    if (activeRisks.length > 0) {
      content += `
        <h3>Active Risks</h3>
        ${this.generateRiskTable(activeRisks)}
      `
    }

    if (closedRisks.length > 0) {
      content += `
        <h3>Closed Risks</h3>
        ${this.generateRiskTable(closedRisks)}
      `
    }

    content += `</section>`
    return content
  }

  private generateRiskTable(risks: Risk[]): string {
    return `
      <table class="risk-register-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Risk</th>
            <th>Category</th>
            <th>Probability</th>
            <th>Impact</th>
            <th>Score</th>
            <th>Response</th>
            <th>Owner</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          ${risks.map((risk, index) => {
            const probability = risk.probability || 'Medium'
            const impact = risk.impact || 'Medium'
            const score = this.calculateRiskScore(probability, impact)
            const scoreClass = this.getRiskScoreClass(score)
            
            return `
              <tr class="${scoreClass}">
                <td>${risk.id || `R${(index + 1).toString().padStart(3, '0')}`}</td>
                <td>${risk.risk || risk.description || risk.title || ''}</td>
                <td>${risk.category || 'General'}</td>
                <td>${probability}</td>
                <td>${impact}</td>
                <td><span class="risk-score-badge ${scoreClass}">${this.getRiskRating(score)}</span></td>
                <td>${risk.response || risk.mitigation || 'TBD'}</td>
                <td>${risk.owner || 'Unassigned'}</td>
                <td><span class="status-badge status-${(risk.status || 'Open').toLowerCase().replace(' ', '-')}">${risk.status || 'Open'}</span></td>
              </tr>
            `
          }).join('')}
        </tbody>
      </table>
    `
  }

  private generateRiskDistribution(): string {
    const risks = this.data.risks || []
    const categories: Record<string, number> = {}
    
    risks.forEach(risk => {
      const category = risk.category || 'General'
      categories[category] = (categories[category] || 0) + 1
    })

    let content = `
      <section class="document-section" id="risk-distribution">
        <h2>5. Risk Distribution</h2>
        
        <h3>By Category</h3>
        <div class="risk-distribution">
          ${Object.entries(categories).map(([category, count]) => `
            <div class="distribution-item">
              <strong>${this.formatRiskCategory(category)}:</strong> ${count} risk${count !== 1 ? 's' : ''}
            </div>
          `).join('')}
        </div>
    `

    if (this.data.riskDistribution) {
      content += this.formatContent(this.data.riskDistribution)
    }

    content += `</section>`
    return content
  }

  private generateMitigationStrategies(): string {
    let content = `
      <section class="document-section" id="mitigation-strategies">
        <h2>6. Mitigation Strategies</h2>
    `

    if (this.data.mitigationStrategies) {
      content += this.formatContent(this.data.mitigationStrategies)
    } else {
      content += `
        <p>Risk mitigation strategies are developed based on the risk assessment and include:</p>
        <ul>
          <li><strong>Avoid:</strong> Eliminate the risk by removing the cause</li>
          <li><strong>Mitigate:</strong> Reduce the probability or impact of the risk</li>
          <li><strong>Transfer:</strong> Shift the risk to a third party</li>
          <li><strong>Accept:</strong> Acknowledge the risk and prepare contingency plans</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateApprovalSection(): string {
    const currentDate = new Date().toLocaleDateString('en-GB', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    })

    return `
      <section class="document-section page-break-before" id="approval-sign-off">
        <h2>7. Approval & Sign-off</h2>
        
        <p>This Risk Register has been reviewed and approved by:</p>
        
        <table class="approval-table">
          <thead>
            <tr>
              <th>Role</th>
              <th>Name</th>
              <th>Signature</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Project Sponsor</td>
              <td>_____________________</td>
              <td>_____________________</td>
              <td>${currentDate}</td>
            </tr>
            <tr>
              <td>Project Manager</td>
              <td>${this.data.projectManager || '_____________________'}</td>
              <td>_____________________</td>
              <td>${currentDate}</td>
            </tr>
            <tr>
              <td>Risk Manager</td>
              <td>_____________________</td>
              <td>_____________________</td>
              <td>${currentDate}</td>
            </tr>
          </tbody>
        </table>
        
        <div class="document-control">
          <h3>Document Control</h3>
          <table>
            <tr>
              <th>Version</th>
              <th>Date</th>
              <th>Author</th>
              <th>Changes</th>
            </tr>
            <tr>
              <td>${this.metadata.version || '1.0'}</td>
              <td>${currentDate}</td>
              <td>${this.metadata.author || 'User'}</td>
              <td>Initial document generation</td>
            </tr>
          </table>
        </div>
      </section>
    `
  }

  private calculateRiskScore(probability: string, impact: string): number {
    const scores: Record<string, number> = {
      'Very Low': 1,
      'Low': 2,
      'Medium': 3,
      'High': 4,
      'Very High': 5
    }
    return (scores[probability] || 3) * (scores[impact] || 3)
  }

  private getRiskRating(score: number): string {
    if (score >= 20) return 'Critical'
    if (score >= 15) return 'High'
    if (score >= 10) return 'Medium'
    if (score >= 5) return 'Low'
    return 'Very Low'
  }

  private getRiskScoreClass(score: number): string {
    if (score >= 20) return 'risk-critical'
    if (score >= 15) return 'risk-high'
    if (score >= 10) return 'risk-medium'
    if (score >= 5) return 'risk-low'
    return 'risk-very-low'
  }

  private getMatrixCellClass(score: number): string {
    if (score >= 16) return 'matrix-critical'
    if (score >= 10) return 'matrix-high'
    if (score >= 5) return 'matrix-medium'
    return 'matrix-low'
  }

  private formatRiskCategory(category: string): string {
    const icons: Record<string, string> = {
      'Strategic': 'üéØ',
      'Operational': '‚öôÔ∏è',
      'Financial': 'üí∞',
      'Technical': 'üíª',
      'Compliance': 'üìã',
      'External': 'üåç'
    }
    return `${icons[category] || 'üìå'} ${category}`
  }

  protected getDocumentSpecificStyles(): string {
    return `
      .risk-matrix-container {
        margin: 2rem 0;
      }
      
      .risk-matrix {
        width: 100%;
        max-width: 700px;
        margin: 0 auto;
        border-collapse: collapse;
      }
      
      .risk-matrix th {
        padding: 0.75rem;
        text-align: center;
        background: #f5f5f5;
        font-weight: 600;
        border: 1px solid #ddd;
      }
      
      .risk-matrix td {
        width: 100px;
        height: 80px;
        text-align: center;
        border: 1px solid #ddd;
        position: relative;
      }
      
      .matrix-label {
        background: #e0e0e0 !important;
      }
      
      .matrix-low {
        background: #C8E6C9;
      }
      
      .matrix-medium {
        background: #FFF9C4;
      }
      
      .matrix-high {
        background: #FFCCBC;
      }
      
      .matrix-critical {
        background: #FFCDD2;
      }
      
      .risk-count {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
      }
      
      .matrix-legend {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin-top: 1.5rem;
        flex-wrap: wrap;
      }
      
      .legend-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .legend-color {
        width: 20px;
        height: 20px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      
      .legend-color.low {
        background: #C8E6C9;
      }
      
      .legend-color.medium {
        background: #FFF9C4;
      }
      
      .legend-color.high {
        background: #FFCCBC;
      }
      
      .legend-color.critical {
        background: #FFCDD2;
      }
      
      .risk-register-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
        font-size: 0.9rem;
      }
      
      .risk-register-table th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
      }
      
      .risk-register-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
      }
      
      .risk-register-table tbody tr:nth-child(even) {
        background: #f9f9f9;
      }
      
      .risk-very-low {
        background-color: #e3f2fd;
      }
      
      .risk-low {
        background-color: #e8f5e9;
      }
      
      .risk-medium {
        background-color: #fff9e6;
      }
      
      .risk-high {
        background-color: #ffebee;
      }
      
      .risk-critical {
        background-color: #ffcdd2;
      }
      
      .risk-score-badge {
        padding: 3px 10px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.85rem;
        display: inline-block;
      }
      
      .risk-score-badge.risk-very-low {
        background: #2196F3;
        color: white;
      }
      
      .risk-score-badge.risk-low {
        background: #4CAF50;
        color: white;
      }
      
      .risk-score-badge.risk-medium {
        background: #FF9800;
        color: white;
      }
      
      .risk-score-badge.risk-high {
        background: #F44336;
        color: white;
      }
      
      .risk-score-badge.risk-critical {
        background: #9C27B0;
        color: white;
      }
      
      .status-badge {
        padding: 3px 10px;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: 500;
        display: inline-block;
      }
      
      .status-open {
        background: #FFF3E0;
        color: #E65100;
      }
      
      .status-monitoring {
        background: #E3F2FD;
        color: #0D47A1;
      }
      
      .status-closed {
        background: #E0E0E0;
        color: #616161;
      }
      
      .status-resolved {
        background: #E8F5E9;
        color: #1B5E20;
      }
      
      .status-occurred {
        background: #FCE4EC;
        color: #880E4F;
      }
      
      .key-metrics {
        background: #f0f8ff;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1.5rem 0;
        border-left: 4px solid #2196F3;
      }
      
      .top-risks {
        background: #fff3e0;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1.5rem 0;
        border-left: 4px solid #ff9800;
      }
      
      .risk-distribution {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }
      
      .distribution-item {
        background: #f9f9f9;
        padding: 1rem;
        border-radius: 8px;
        border-left: 3px solid #667eea;
      }
      
      .approval-table {
        width: 100%;
        margin: 2rem 0;
        border-collapse: collapse;
      }
      
      .approval-table th {
        background: #f5f5f5;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
        border: 1px solid #ddd;
      }
      
      .approval-table td {
        padding: 0.75rem;
        border: 1px solid #ddd;
      }
      
      .document-control {
        margin-top: 3rem;
      }
      
      .document-control table {
        width: 100%;
        border-collapse: collapse;
      }
      
      .document-control th {
        background: #f5f5f5;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
        border: 1px solid #ddd;
      }
      
      .document-control td {
        padding: 0.75rem;
        border: 1px solid #ddd;
      }
    `
  }
}

export interface RiskRegisterMetadata extends DocumentMetadata {}