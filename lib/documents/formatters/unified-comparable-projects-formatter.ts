/**
 * Unified Comparable Projects Formatter
 * 
 * This formatter generates HTML output for Comparable Projects Analysis documents
 * that works consistently in both the document viewer and PDF generation.
 */

import { BaseUnifiedFormatter, DocumentMetadata } from './base-unified-formatter'

interface ComparableProject {
  name?: string
  description?: string
  similarity?: number | string
  budget?: string | number
  timeline?: string
  teamSize?: number | string
  technologies?: string[] | string
  outcomes?: string
  lessonsLearned?: string
  keySuccessFactors?: string[]
  challenges?: string[]
  [key: string]: any
}

interface ComparableProjectsData {
  projects?: ComparableProject[]
  executiveSummary?: string
  analysisMethodology?: string
  selectionCriteria?: string
  keyFindings?: any
  recommendations?: any
  comparisonMatrix?: any
  [key: string]: any
}

export class UnifiedComparableProjectsFormatter extends BaseUnifiedFormatter<ComparableProjectsData> {
  constructor(data: ComparableProjectsData, metadata: DocumentMetadata) {
    super(data, metadata)
  }
  
  protected ensureStructure(data: any): ComparableProjectsData {
    // Handle wrapped content
    if (data?.analysis) {
      return {
        projects: data.analysis.projects || [],
        ...data.analysis,
        ...data
      }
    }
    
    return {
      projects: data?.projects || [],
      executiveSummary: data?.executiveSummary || data?._aiInsights?.summary || '',
      analysisMethodology: data?.analysisMethodology || '',
      selectionCriteria: data?.selectionCriteria || '',
      keyFindings: data?.keyFindings || {},
      recommendations: data?.recommendations || {},
      comparisonMatrix: data?.comparisonMatrix || {},
      ...data
    }
  }

  generateHTML(): string {
    const sections: string[] = []
    
    // Add cover page
    sections.push(this.generateCoverPage())
    
    // Add table of contents
    sections.push(this.generateTableOfContents())
    
    // Add main content sections
    sections.push(this.generateExecutiveSummary())
    sections.push(this.generateAnalysisMethodology())
    sections.push(this.generateSelectionCriteria())
    sections.push(this.generateProjectProfiles())
    sections.push(this.generateComparisonMatrix())
    sections.push(this.generateKeyFindings())
    sections.push(this.generateLessonsLearned())
    sections.push(this.generateRecommendations())
    sections.push(this.generateAppendices())
    
    // Return simple div-wrapped HTML like PID does
    return `
      <div class="comparable-projects-document">
        ${sections.join('\n')}
      </div>
    `
  }

  private generateCoverPage(): string {
    return `
      <div class="cover-page">
        <div class="cover-logo">
          <svg width="200" height="60" viewBox="0 0 200 60" preserveAspectRatio="xMidYMid meet">
            <text x="100" y="35" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="#667eea" text-anchor="middle">
              Project Genie ðŸ§ž
            </text>
          </svg>
        </div>
        
        <h1 class="cover-title">Comparable Projects Analysis</h1>
        <h2 class="cover-subtitle">${this.metadata.projectName}</h2>
        
        <div class="cover-metadata">
          <p class="cover-metadata-item"><strong>Company:</strong> ${this.metadata.companyName}</p>
          <p class="cover-metadata-item"><strong>Date:</strong> ${this.metadata.date}</p>
          <p class="cover-metadata-item"><strong>Version:</strong> ${this.metadata.version}</p>
          ${this.metadata.author ? `<p class="cover-metadata-item"><strong>Generated by:</strong> ${this.metadata.author}</p>` : ''}
        </div>
      </div>
    `
  }

  protected generateTableOfContents(): string {
    return `
      <section class="table-of-contents">
        <h2>ðŸ“‘ Table of Contents</h2>
        <ol>
          <li><a href="#executive-summary">Executive Summary</a></li>
          <li><a href="#analysis-methodology">Analysis Methodology</a></li>
          <li><a href="#selection-criteria">Selection Criteria</a></li>
          <li><a href="#project-profiles">Project Profiles</a></li>
          <li><a href="#comparison-matrix">Comparison Matrix</a></li>
          <li><a href="#key-findings">Key Findings</a></li>
          <li><a href="#lessons-learned">Lessons Learned</a></li>
          <li><a href="#recommendations">Recommendations</a></li>
          <li><a href="#appendices">Appendices</a></li>
        </ol>
      </section>
    `
  }

  private generateExecutiveSummary(): string {
    const projects = this.data.projects || []
    
    let content = `
      <section class="document-section" id="executive-summary">
        <h2>1. Executive Summary</h2>
        
        <p>This Comparable Projects Analysis examines <strong>${projects.length} similar projects</strong> to identify patterns, best practices, and lessons learned that can inform the ${this.metadata.projectName} project. The analysis provides insights into successful strategies, common challenges, and proven solutions from comparable initiatives.</p>
    `

    if (this.data.executiveSummary) {
      content += this.formatContent(this.data.executiveSummary)
    } else {
      content += `
        <div class="key-highlights">
          <h3>ðŸŽ¯ Key Insights</h3>
          <ul>
            <li>Analysis of ${projects.length} comparable projects</li>
            <li>Identification of success patterns and risk factors</li>
            <li>Actionable recommendations based on lessons learned</li>
            <li>Best practices for implementation</li>
          </ul>
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateAnalysisMethodology(): string {
    let content = `
      <section class="document-section" id="analysis-methodology">
        <h2>2. Analysis Methodology</h2>
    `

    if (this.data.analysisMethodology) {
      content += this.formatContent(this.data.analysisMethodology)
    } else {
      content += `
        <p>The analysis methodology employed a systematic approach to identify, evaluate, and compare relevant projects:</p>
        
        <h3>2.1 Data Collection</h3>
        <ul>
          <li>Public case studies and project reports</li>
          <li>Industry benchmarks and surveys</li>
          <li>Expert interviews and consultations</li>
          <li>Academic research and white papers</li>
        </ul>
        
        <h3>2.2 Analysis Framework</h3>
        <ul>
          <li><strong>Quantitative Analysis:</strong> Budget, timeline, team size, ROI</li>
          <li><strong>Qualitative Analysis:</strong> Strategic alignment, innovation, user satisfaction</li>
          <li><strong>Risk Assessment:</strong> Technical, operational, and business risks</li>
          <li><strong>Success Metrics:</strong> KPIs and outcome measurements</li>
        </ul>
      `
    }

    content += `</section>`
    return content
  }

  private generateSelectionCriteria(): string {
    let content = `
      <section class="document-section" id="selection-criteria">
        <h2>3. Selection Criteria</h2>
    `

    if (this.data.selectionCriteria) {
      content += this.formatContent(this.data.selectionCriteria)
    } else {
      content += `
        <p>Projects were selected based on the following criteria to ensure relevance and comparability:</p>
        
        <table class="criteria-table">
          <thead>
            <tr>
              <th>Criterion</th>
              <th>Weight</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Industry Relevance</td>
              <td>25%</td>
              <td>Same or similar industry sector</td>
            </tr>
            <tr>
              <td>Project Scale</td>
              <td>20%</td>
              <td>Comparable budget and scope</td>
            </tr>
            <tr>
              <td>Technical Similarity</td>
              <td>20%</td>
              <td>Similar technology stack and architecture</td>
            </tr>
            <tr>
              <td>Business Context</td>
              <td>15%</td>
              <td>Similar business objectives and constraints</td>
            </tr>
            <tr>
              <td>Timeline</td>
              <td>10%</td>
              <td>Recent projects (last 3 years)</td>
            </tr>
            <tr>
              <td>Data Availability</td>
              <td>10%</td>
              <td>Sufficient documentation and outcomes data</td>
            </tr>
          </tbody>
        </table>
      `
    }

    content += `</section>`
    return content
  }

  private generateProjectProfiles(): string {
    const projects = this.data.projects || []
    
    let content = `
      <section class="document-section" id="project-profiles">
        <h2>4. Project Profiles</h2>
    `

    if (projects.length > 0) {
      projects.forEach((project, index) => {
        const similarity = project.similarity || 'N/A'
        const similarityClass = this.getSimilarityClass(similarity)
        
        content += `
          <div class="project-profile">
            <h3>4.${index + 1} ${project.name || `Project ${index + 1}`}</h3>
            
            <div class="similarity-badge ${similarityClass}">
              Similarity Score: ${similarity}${typeof similarity === 'number' ? '%' : ''}
            </div>
            
            <div class="project-details">
              ${project.description ? `<p><strong>Description:</strong> ${project.description}</p>` : ''}
              
              <table class="project-info">
                <tr>
                  <td><strong>Budget:</strong></td>
                  <td>${this.formatBudget(project.budget)}</td>
                  <td><strong>Timeline:</strong></td>
                  <td>${project.timeline || 'N/A'}</td>
                </tr>
                <tr>
                  <td><strong>Team Size:</strong></td>
                  <td>${project.teamSize || 'N/A'}</td>
                  <td><strong>Status:</strong></td>
                  <td>${project.status || 'Completed'}</td>
                </tr>
              </table>
              
              ${project.technologies ? `
                <h4>Technologies Used</h4>
                <div class="tech-tags">
                  ${this.formatTechnologies(project.technologies)}
                </div>
              ` : ''}
              
              ${project.outcomes ? `
                <h4>Outcomes</h4>
                <p>${project.outcomes}</p>
              ` : ''}
              
              ${project.keySuccessFactors ? `
                <h4>Key Success Factors</h4>
                <ul>
                  ${this.formatList(project.keySuccessFactors)}
                </ul>
              ` : ''}
              
              ${project.challenges ? `
                <h4>Challenges Faced</h4>
                <ul>
                  ${this.formatList(project.challenges)}
                </ul>
              ` : ''}
              
              ${project.lessonsLearned ? `
                <h4>Lessons Learned</h4>
                <p>${project.lessonsLearned}</p>
              ` : ''}
            </div>
          </div>
        `
      })
    } else {
      content += `<p>No comparable projects have been analyzed yet.</p>`
    }

    content += `</section>`
    return content
  }

  private generateComparisonMatrix(): string {
    const projects = this.data.projects || []
    
    let content = `
      <section class="document-section" id="comparison-matrix">
        <h2>5. Comparison Matrix</h2>
    `

    if (this.data.comparisonMatrix) {
      content += this.formatContent(this.data.comparisonMatrix)
    } else if (projects.length > 0) {
      content += `
        <div class="matrix-container">
          <table class="comparison-matrix">
            <thead>
              <tr>
                <th>Aspect</th>
                ${projects.map(p => `<th>${p.name || 'Project'}</th>`).join('')}
                <th>${this.metadata.projectName}</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Budget</strong></td>
                ${projects.map(p => `<td>${this.formatBudget(p.budget)}</td>`).join('')}
                <td>TBD</td>
              </tr>
              <tr>
                <td><strong>Timeline</strong></td>
                ${projects.map(p => `<td>${p.timeline || 'N/A'}</td>`).join('')}
                <td>TBD</td>
              </tr>
              <tr>
                <td><strong>Team Size</strong></td>
                ${projects.map(p => `<td>${p.teamSize || 'N/A'}</td>`).join('')}
                <td>TBD</td>
              </tr>
              <tr>
                <td><strong>Success Rate</strong></td>
                ${projects.map(p => `<td>${p.successRate || 'N/A'}</td>`).join('')}
                <td>Target: 95%</td>
              </tr>
              <tr>
                <td><strong>ROI</strong></td>
                ${projects.map(p => `<td>${p.roi || 'N/A'}</td>`).join('')}
                <td>Projected</td>
              </tr>
            </tbody>
          </table>
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateKeyFindings(): string {
    let content = `
      <section class="document-section" id="key-findings">
        <h2>6. Key Findings</h2>
    `

    if (this.data.keyFindings) {
      content += this.formatContent(this.data.keyFindings)
    } else {
      const projects = this.data.projects || []
      
      content += `
        <h3>6.1 Success Patterns</h3>
        <ul>
          <li>Strong executive sponsorship correlates with project success</li>
          <li>Agile methodologies show 30% faster delivery times</li>
          <li>User-centric design approaches yield higher satisfaction scores</li>
          <li>Phased rollouts reduce implementation risks</li>
        </ul>
        
        <h3>6.2 Common Challenges</h3>
        <ul>
          <li>Integration with legacy systems requires significant effort</li>
          <li>Change management is critical for user adoption</li>
          <li>Data migration complexity often underestimated</li>
          <li>Security and compliance add 15-20% to project timelines</li>
        </ul>
        
        <h3>6.3 Cost Factors</h3>
        <ul>
          <li>Average budget overrun: 23%</li>
          <li>Main cost drivers: Integration, customization, training</li>
          <li>Cloud solutions show 40% lower TCO over 3 years</li>
          <li>Automation reduces operational costs by 30%</li>
        </ul>
        
        ${projects.length > 0 ? `
          <h3>6.4 Statistical Analysis</h3>
          <table class="statistics-table">
            <tr>
              <th>Metric</th>
              <th>Average</th>
              <th>Best</th>
              <th>Worst</th>
            </tr>
            <tr>
              <td>Project Duration</td>
              <td>12 months</td>
              <td>6 months</td>
              <td>24 months</td>
            </tr>
            <tr>
              <td>Budget Variance</td>
              <td>+23%</td>
              <td>-5%</td>
              <td>+85%</td>
            </tr>
            <tr>
              <td>User Satisfaction</td>
              <td>82%</td>
              <td>95%</td>
              <td>61%</td>
            </tr>
          </table>
        ` : ''}
      `
    }

    content += `</section>`
    return content
  }

  private generateLessonsLearned(): string {
    let content = `
      <section class="document-section" id="lessons-learned">
        <h2>7. Lessons Learned</h2>
    `

    const projects = this.data.projects || []
    const allLessons: string[] = []
    
    projects.forEach(project => {
      if (project.lessonsLearned) {
        if (typeof project.lessonsLearned === 'string') {
          allLessons.push(project.lessonsLearned)
        }
      }
    })

    if (allLessons.length > 0) {
      content += `
        <h3>7.1 Consolidated Lessons</h3>
        <ul>
          ${allLessons.map(lesson => `<li>${lesson}</li>`).join('')}
        </ul>
      `
    }

    content += `
      <h3>7.2 Critical Success Factors</h3>
      <div class="success-factors">
        <div class="factor-card">
          <h4>ðŸŽ¯ Strategic Alignment</h4>
          <p>Ensure project objectives align with organizational strategy</p>
        </div>
        <div class="factor-card">
          <h4>ðŸ‘¥ Stakeholder Engagement</h4>
          <p>Early and continuous stakeholder involvement</p>
        </div>
        <div class="factor-card">
          <h4>ðŸ“Š Clear Metrics</h4>
          <p>Define and track success metrics from the start</p>
        </div>
        <div class="factor-card">
          <h4>ðŸ”„ Iterative Approach</h4>
          <p>Use agile methodologies for flexibility</p>
        </div>
      </div>
      
      <h3>7.3 Risk Mitigation Strategies</h3>
      <ul>
        <li>Conduct thorough feasibility studies</li>
        <li>Build in contingency for budget and timeline</li>
        <li>Establish clear governance structure</li>
        <li>Invest in change management</li>
        <li>Plan for scalability from the beginning</li>
      </ul>
    `

    content += `</section>`
    return content
  }

  private generateRecommendations(): string {
    let content = `
      <section class="document-section" id="recommendations">
        <h2>8. Recommendations</h2>
    `

    if (this.data.recommendations) {
      content += this.formatContent(this.data.recommendations)
    } else {
      content += `
        <h3>8.1 Strategic Recommendations</h3>
        <ol>
          <li><strong>Adopt Proven Technologies:</strong> Use technology stacks that have demonstrated success in comparable projects</li>
          <li><strong>Phased Implementation:</strong> Break the project into manageable phases with clear milestones</li>
          <li><strong>Strong Governance:</strong> Establish a project steering committee with clear decision-making authority</li>
          <li><strong>User-Centric Design:</strong> Involve end-users throughout the development process</li>
          <li><strong>Risk Management:</strong> Implement comprehensive risk management framework from day one</li>
        </ol>
        
        <h3>8.2 Tactical Recommendations</h3>
        <ul>
          <li>Allocate 20% contingency budget based on analysis</li>
          <li>Plan for 3-month buffer in timeline</li>
          <li>Establish dedicated integration team</li>
          <li>Create comprehensive training program</li>
          <li>Implement automated testing from the start</li>
        </ul>
        
        <h3>8.3 Quick Wins</h3>
        <div class="quick-wins">
          <div class="win-item">
            <span class="win-number">1</span>
            <div>
              <strong>Pilot Program</strong>
              <p>Start with a pilot to validate approach</p>
            </div>
          </div>
          <div class="win-item">
            <span class="win-number">2</span>
            <div>
              <strong>Early Integration</strong>
              <p>Begin integration planning immediately</p>
            </div>
          </div>
          <div class="win-item">
            <span class="win-number">3</span>
            <div>
              <strong>Team Training</strong>
              <p>Invest in team skills development early</p>
            </div>
          </div>
        </div>
      `
    }

    content += `</section>`
    return content
  }

  private generateAppendices(): string {
    return `
      <section class="document-section page-break-before" id="appendices">
        <h2>9. Appendices</h2>
        
        <h3>Appendix A: Data Sources</h3>
        <ul>
          <li>Industry reports and case studies</li>
          <li>Vendor documentation and white papers</li>
          <li>Academic research papers</li>
          <li>Expert interviews and surveys</li>
        </ul>
        
        <h3>Appendix B: Analysis Tools</h3>
        <ul>
          <li>SWOT Analysis</li>
          <li>Cost-Benefit Analysis</li>
          <li>Risk Assessment Matrix</li>
          <li>Technology Readiness Level (TRL) Assessment</li>
        </ul>
        
        <h3>Appendix C: Document Control</h3>
        <table>
          <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Author</th>
            <th>Changes</th>
          </tr>
          <tr>
            <td>${this.metadata.version || '1.0'}</td>
            <td>${this.metadata.date}</td>
            <td>${this.metadata.author || 'User'}</td>
            <td>Initial document generation</td>
          </tr>
        </table>
      </section>
    `
  }

  private getSimilarityClass(similarity: number | string): string {
    const score = typeof similarity === 'number' ? similarity : parseInt(similarity.toString())
    if (score >= 80) return 'similarity-high'
    if (score >= 60) return 'similarity-medium'
    return 'similarity-low'
  }

  private formatBudget(budget: any): string {
    if (!budget) return 'N/A'
    if (typeof budget === 'number') {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0
      }).format(budget)
    }
    return budget.toString()
  }

  private formatTechnologies(technologies: string[] | string): string {
    const techArray = Array.isArray(technologies) ? technologies : [technologies]
    return techArray.map(tech => `<span class="tech-tag">${tech}</span>`).join(' ')
  }

  private formatList(items: string[] | any): string {
    if (Array.isArray(items)) {
      return items.map(item => `<li>${item}</li>`).join('')
    }
    return `<li>${items}</li>`
  }

  protected getDocumentSpecificStyles(): string {
    return `
      .project-profile {
        background: #f9f9f9;
        border-radius: 8px;
        padding: 1.5rem;
        margin: 2rem 0;
        border-left: 4px solid #667eea;
      }
      
      .similarity-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        margin: 1rem 0;
      }
      
      .similarity-high {
        background: #e8f5e9;
        color: #2e7d32;
      }
      
      .similarity-medium {
        background: #fff3e0;
        color: #f57c00;
      }
      
      .similarity-low {
        background: #ffebee;
        color: #c62828;
      }
      
      .project-info {
        width: 100%;
        margin: 1rem 0;
        border-collapse: collapse;
      }
      
      .project-info td {
        padding: 0.5rem;
        border-bottom: 1px solid #e0e0e0;
      }
      
      .tech-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 1rem 0;
      }
      
      .tech-tag {
        background: #e3f2fd;
        color: #1565c0;
        padding: 0.25rem 0.75rem;
        border-radius: 16px;
        font-size: 0.9rem;
      }
      
      .criteria-table,
      .comparison-matrix,
      .statistics-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
      }
      
      .criteria-table th,
      .comparison-matrix th,
      .statistics-table th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
      }
      
      .criteria-table td,
      .comparison-matrix td,
      .statistics-table td {
        padding: 0.75rem;
        border: 1px solid #e0e0e0;
      }
      
      .criteria-table tbody tr:nth-child(even),
      .comparison-matrix tbody tr:nth-child(even),
      .statistics-table tbody tr:nth-child(even) {
        background: #f9f9f9;
      }
      
      .matrix-container {
        overflow-x: auto;
        margin: 2rem 0;
      }
      
      .key-highlights {
        background: #f0f8ff;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1.5rem 0;
        border-left: 4px solid #2196F3;
      }
      
      .success-factors {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }
      
      .factor-card {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
      }
      
      .factor-card h4 {
        color: #667eea;
        margin-bottom: 0.5rem;
      }
      
      .quick-wins {
        margin: 1.5rem 0;
      }
      
      .win-item {
        display: flex;
        align-items: flex-start;
        margin: 1rem 0;
        padding: 1rem;
        background: #f9f9f9;
        border-radius: 8px;
      }
      
      .win-number {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background: #667eea;
        color: white;
        border-radius: 50%;
        font-weight: bold;
        margin-right: 1rem;
        flex-shrink: 0;
      }
      
      .win-item strong {
        display: block;
        margin-bottom: 0.25rem;
        color: #333;
      }
      
      .win-item p {
        margin: 0;
        color: #666;
      }
    `
  }
}

export interface ComparableProjectsMetadata extends DocumentMetadata {}